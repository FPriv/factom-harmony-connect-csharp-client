/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using harmony-connect-client.Client;
using harmony-connect-client.Model;

namespace harmony-connect-client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChainsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Chain Info
        /// </summary>
        /// <remarks>
        /// Get information about a specific chain on Connect
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Chain</returns>
        Chain GetChainByID (string chainId);

        /// <summary>
        /// Get Chain Info
        /// </summary>
        /// <remarks>
        /// Get information about a specific chain on Connect
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>ApiResponse of Chain</returns>
        ApiResponse<Chain> GetChainByIDWithHttpInfo (string chainId);
        /// <summary>
        /// Get All Chains
        /// </summary>
        /// <remarks>
        /// Returns all of the chains on factomd.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>ChainList</returns>
        ChainList GetChains (int? limit = null, int? offset = null, string stages = null);

        /// <summary>
        /// Get All Chains
        /// </summary>
        /// <remarks>
        /// Returns all of the chains on factomd.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>ApiResponse of ChainList</returns>
        ApiResponse<ChainList> GetChainsWithHttpInfo (int? limit = null, int? offset = null, string stages = null);
        /// <summary>
        /// Create a Chain
        /// </summary>
        /// <remarks>
        /// Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>ChainShort</returns>
        ChainShort PostChain (ChainCreate chainCreate);

        /// <summary>
        /// Create a Chain
        /// </summary>
        /// <remarks>
        /// Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>ApiResponse of ChainShort</returns>
        ApiResponse<ChainShort> PostChainWithHttpInfo (ChainCreate chainCreate);
        /// <summary>
        /// Search Chains
        /// </summary>
        /// <remarks>
        /// Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ChainList</returns>
        ChainList PostChainSearch (SearchBody searchBody, int? limit = null, int? offset = null);

        /// <summary>
        /// Search Chains
        /// </summary>
        /// <remarks>
        /// Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ApiResponse of ChainList</returns>
        ApiResponse<ChainList> PostChainSearchWithHttpInfo (SearchBody searchBody, int? limit = null, int? offset = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Chain Info
        /// </summary>
        /// <remarks>
        /// Get information about a specific chain on Connect
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of Chain</returns>
        System.Threading.Tasks.Task<Chain> GetChainByIDAsync (string chainId);

        /// <summary>
        /// Get Chain Info
        /// </summary>
        /// <remarks>
        /// Get information about a specific chain on Connect
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of ApiResponse (Chain)</returns>
        System.Threading.Tasks.Task<ApiResponse<Chain>> GetChainByIDAsyncWithHttpInfo (string chainId);
        /// <summary>
        /// Get All Chains
        /// </summary>
        /// <remarks>
        /// Returns all of the chains on factomd.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of ChainList</returns>
        System.Threading.Tasks.Task<ChainList> GetChainsAsync (int? limit = null, int? offset = null, string stages = null);

        /// <summary>
        /// Get All Chains
        /// </summary>
        /// <remarks>
        /// Returns all of the chains on factomd.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ChainList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChainList>> GetChainsAsyncWithHttpInfo (int? limit = null, int? offset = null, string stages = null);
        /// <summary>
        /// Create a Chain
        /// </summary>
        /// <remarks>
        /// Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>Task of ChainShort</returns>
        System.Threading.Tasks.Task<ChainShort> PostChainAsync (ChainCreate chainCreate);

        /// <summary>
        /// Create a Chain
        /// </summary>
        /// <remarks>
        /// Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>Task of ApiResponse (ChainShort)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChainShort>> PostChainAsyncWithHttpInfo (ChainCreate chainCreate);
        /// <summary>
        /// Search Chains
        /// </summary>
        /// <remarks>
        /// Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ChainList</returns>
        System.Threading.Tasks.Task<ChainList> PostChainSearchAsync (SearchBody searchBody, int? limit = null, int? offset = null);

        /// <summary>
        /// Search Chains
        /// </summary>
        /// <remarks>
        /// Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ApiResponse (ChainList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChainList>> PostChainSearchAsyncWithHttpInfo (SearchBody searchBody, int? limit = null, int? offset = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChainsApi : IChainsApi
    {
        private harmony-connect-client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChainsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChainsApi(String basePath)
        {
            this.Configuration = new harmony-connect-client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChainsApi"/> class
        /// </summary>
        /// <returns></returns>
        public ChainsApi()
        {
            this.Configuration = harmony-connect-client.Client.Configuration.Default;

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChainsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChainsApi(harmony-connect-client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = harmony-connect-client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public harmony-connect-client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public harmony-connect-client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Chain Info Get information about a specific chain on Connect
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Chain</returns>
        public Chain GetChainByID (string chainId)
        {
             ApiResponse<Chain> localVarResponse = GetChainByIDWithHttpInfo(chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chain Info Get information about a specific chain on Connect
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>ApiResponse of Chain</returns>
        public ApiResponse< Chain > GetChainByIDWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ChainsApi->GetChainByID");

            var localVarPath = "/chains/{chain_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChainByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chain>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chain) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chain)));
        }

        /// <summary>
        /// Get Chain Info Get information about a specific chain on Connect
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of Chain</returns>
        public async System.Threading.Tasks.Task<Chain> GetChainByIDAsync (string chainId)
        {
             ApiResponse<Chain> localVarResponse = await GetChainByIDAsyncWithHttpInfo(chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chain Info Get information about a specific chain on Connect
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of ApiResponse (Chain)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Chain>> GetChainByIDAsyncWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling ChainsApi->GetChainByID");

            var localVarPath = "/chains/{chain_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChainByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Chain>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Chain) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Chain)));
        }

        /// <summary>
        /// Get All Chains Returns all of the chains on factomd.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>ChainList</returns>
        public ChainList GetChains (int? limit = null, int? offset = null, string stages = null)
        {
             ApiResponse<ChainList> localVarResponse = GetChainsWithHttpInfo(limit, offset, stages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get All Chains Returns all of the chains on factomd.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>ApiResponse of ChainList</returns>
        public ApiResponse< ChainList > GetChainsWithHttpInfo (int? limit = null, int? offset = null, string stages = null)
        {

            var localVarPath = "/chains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (stages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stages", stages)); // query parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainList)));
        }

        /// <summary>
        /// Get All Chains Returns all of the chains on factomd.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of ChainList</returns>
        public async System.Threading.Tasks.Task<ChainList> GetChainsAsync (int? limit = null, int? offset = null, string stages = null)
        {
             ApiResponse<ChainList> localVarResponse = await GetChainsAsyncWithHttpInfo(limit, offset, stages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get All Chains Returns all of the chains on factomd.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (ChainList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChainList>> GetChainsAsyncWithHttpInfo (int? limit = null, int? offset = null, string stages = null)
        {

            var localVarPath = "/chains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (stages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stages", stages)); // query parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetChains", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainList)));
        }

        /// <summary>
        /// Create a Chain Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>ChainShort</returns>
        public ChainShort PostChain (ChainCreate chainCreate)
        {
             ApiResponse<ChainShort> localVarResponse = PostChainWithHttpInfo(chainCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a Chain Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>ApiResponse of ChainShort</returns>
        public ApiResponse< ChainShort > PostChainWithHttpInfo (ChainCreate chainCreate)
        {
            // verify the required parameter 'chainCreate' is set
            if (chainCreate == null)
                throw new ApiException(400, "Missing required parameter 'chainCreate' when calling ChainsApi->PostChain");

            var localVarPath = "/chains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainCreate != null && chainCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(chainCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chainCreate; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainShort)));
        }

        /// <summary>
        /// Create a Chain Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>Task of ChainShort</returns>
        public async System.Threading.Tasks.Task<ChainShort> PostChainAsync (ChainCreate chainCreate)
        {
             ApiResponse<ChainShort> localVarResponse = await PostChainAsyncWithHttpInfo(chainCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a Chain Create a new chain. Each chain functions as a mini-blockchain such that all of the entries are linked. Every entry relies on data from previous entries in the chain. Any unauthorized alterations to any of these entries can be detected. Be aware that data entered into the &#x60;content&#x60; and &#x60;external_ids&#x60; fields must be in Base64 format. Sending this request will cause Connect to create the first entry of the chain. The data entered into the &#x60;content&#x60; and &#x60;external_id&#x60; fields will be applied to this entry.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainCreate"></param>
        /// <returns>Task of ApiResponse (ChainShort)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChainShort>> PostChainAsyncWithHttpInfo (ChainCreate chainCreate)
        {
            // verify the required parameter 'chainCreate' is set
            if (chainCreate == null)
                throw new ApiException(400, "Missing required parameter 'chainCreate' when calling ChainsApi->PostChain");

            var localVarPath = "/chains";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainCreate != null && chainCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(chainCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = chainCreate; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainShort)));
        }

        /// <summary>
        /// Search Chains Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ChainList</returns>
        public ChainList PostChainSearch (SearchBody searchBody, int? limit = null, int? offset = null)
        {
             ApiResponse<ChainList> localVarResponse = PostChainSearchWithHttpInfo(searchBody, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Chains Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ApiResponse of ChainList</returns>
        public ApiResponse< ChainList > PostChainSearchWithHttpInfo (SearchBody searchBody, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'searchBody' is set
            if (searchBody == null)
                throw new ApiException(400, "Missing required parameter 'searchBody' when calling ChainsApi->PostChainSearch");

            var localVarPath = "/chains/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (searchBody != null && searchBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchBody; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChainSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainList)));
        }

        /// <summary>
        /// Search Chains Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ChainList</returns>
        public async System.Threading.Tasks.Task<ChainList> PostChainSearchAsync (SearchBody searchBody, int? limit = null, int? offset = null)
        {
             ApiResponse<ChainList> localVarResponse = await PostChainSearchAsyncWithHttpInfo(searchBody, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Chains Finds all of the chains with &#x60;external_ids&#x60; that match what you&#39;ve entered. External IDs must be sent in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ApiResponse (ChainList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChainList>> PostChainSearchAsyncWithHttpInfo (SearchBody searchBody, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'searchBody' is set
            if (searchBody == null)
                throw new ApiException(400, "Missing required parameter 'searchBody' when calling ChainsApi->PostChainSearch");

            var localVarPath = "/chains/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (searchBody != null && searchBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchBody; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostChainSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainList)));
        }

    }
}
