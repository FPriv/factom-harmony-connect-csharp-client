/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using harmony-connect-client.Client;
using harmony-connect-client.Model;

namespace harmony-connect-client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIdentitiesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Identity Chain Info
        /// </summary>
        /// <remarks>
        /// Retrieve the details about a particular Identity Chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>IdentityChain</returns>
        IdentityChain GetIdChainbyId (string identityChainId);

        /// <summary>
        /// Get Identity Chain Info
        /// </summary>
        /// <remarks>
        /// Retrieve the details about a particular Identity Chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>ApiResponse of IdentityChain</returns>
        ApiResponse<IdentityChain> GetIdChainbyIdWithHttpInfo (string identityChainId);
        /// <summary>
        /// Get Key Info
        /// </summary>
        /// <remarks>
        /// Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>IdentityKey</returns>
        IdentityKey GetKeybyEntryHash (string identityChainId, string keyString);

        /// <summary>
        /// Get Key Info
        /// </summary>
        /// <remarks>
        /// Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>ApiResponse of IdentityKey</returns>
        ApiResponse<IdentityKey> GetKeybyEntryHashWithHttpInfo (string identityChainId, string keyString);
        /// <summary>
        /// Get Identity Chain&#39;s Keys
        /// </summary>
        /// <remarks>
        /// Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>KeyList</returns>
        KeyList GetKeysbyIdChainId (string identityChainId, int? limit = null, int? offset = null);

        /// <summary>
        /// Get Identity Chain&#39;s Keys
        /// </summary>
        /// <remarks>
        /// Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ApiResponse of KeyList</returns>
        ApiResponse<KeyList> GetKeysbyIdChainIdWithHttpInfo (string identityChainId, int? limit = null, int? offset = null);
        /// <summary>
        /// Create Identity Chain
        /// </summary>
        /// <remarks>
        /// Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>ChainShort</returns>
        ChainShort PostIdChain (IdentityCreate identityCreate);

        /// <summary>
        /// Create Identity Chain
        /// </summary>
        /// <remarks>
        /// Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>ApiResponse of ChainShort</returns>
        ApiResponse<ChainShort> PostIdChainWithHttpInfo (IdentityCreate identityCreate);
        /// <summary>
        /// Replace Identity Key
        /// </summary>
        /// <remarks>
        /// Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>EntryShort</returns>
        EntryShort PostKeytoIdChainId (string identityChainId, IdentityKeyReplace identityKeyReplace);

        /// <summary>
        /// Replace Identity Key
        /// </summary>
        /// <remarks>
        /// Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>ApiResponse of EntryShort</returns>
        ApiResponse<EntryShort> PostKeytoIdChainIdWithHttpInfo (string identityChainId, IdentityKeyReplace identityKeyReplace);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Identity Chain Info
        /// </summary>
        /// <remarks>
        /// Retrieve the details about a particular Identity Chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>Task of IdentityChain</returns>
        System.Threading.Tasks.Task<IdentityChain> GetIdChainbyIdAsync (string identityChainId);

        /// <summary>
        /// Get Identity Chain Info
        /// </summary>
        /// <remarks>
        /// Retrieve the details about a particular Identity Chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>Task of ApiResponse (IdentityChain)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityChain>> GetIdChainbyIdAsyncWithHttpInfo (string identityChainId);
        /// <summary>
        /// Get Key Info
        /// </summary>
        /// <remarks>
        /// Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>Task of IdentityKey</returns>
        System.Threading.Tasks.Task<IdentityKey> GetKeybyEntryHashAsync (string identityChainId, string keyString);

        /// <summary>
        /// Get Key Info
        /// </summary>
        /// <remarks>
        /// Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>Task of ApiResponse (IdentityKey)</returns>
        System.Threading.Tasks.Task<ApiResponse<IdentityKey>> GetKeybyEntryHashAsyncWithHttpInfo (string identityChainId, string keyString);
        /// <summary>
        /// Get Identity Chain&#39;s Keys
        /// </summary>
        /// <remarks>
        /// Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of KeyList</returns>
        System.Threading.Tasks.Task<KeyList> GetKeysbyIdChainIdAsync (string identityChainId, int? limit = null, int? offset = null);

        /// <summary>
        /// Get Identity Chain&#39;s Keys
        /// </summary>
        /// <remarks>
        /// Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ApiResponse (KeyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<KeyList>> GetKeysbyIdChainIdAsyncWithHttpInfo (string identityChainId, int? limit = null, int? offset = null);
        /// <summary>
        /// Create Identity Chain
        /// </summary>
        /// <remarks>
        /// Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>Task of ChainShort</returns>
        System.Threading.Tasks.Task<ChainShort> PostIdChainAsync (IdentityCreate identityCreate);

        /// <summary>
        /// Create Identity Chain
        /// </summary>
        /// <remarks>
        /// Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>Task of ApiResponse (ChainShort)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChainShort>> PostIdChainAsyncWithHttpInfo (IdentityCreate identityCreate);
        /// <summary>
        /// Replace Identity Key
        /// </summary>
        /// <remarks>
        /// Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>Task of EntryShort</returns>
        System.Threading.Tasks.Task<EntryShort> PostKeytoIdChainIdAsync (string identityChainId, IdentityKeyReplace identityKeyReplace);

        /// <summary>
        /// Replace Identity Key
        /// </summary>
        /// <remarks>
        /// Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>Task of ApiResponse (EntryShort)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntryShort>> PostKeytoIdChainIdAsyncWithHttpInfo (string identityChainId, IdentityKeyReplace identityKeyReplace);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IdentitiesApi : IIdentitiesApi
    {
        private harmony-connect-client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IdentitiesApi(String basePath)
        {
            this.Configuration = new harmony-connect-client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class
        /// </summary>
        /// <returns></returns>
        public IdentitiesApi()
        {
            this.Configuration = harmony-connect-client.Client.Configuration.Default;

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IdentitiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IdentitiesApi(harmony-connect-client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = harmony-connect-client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public harmony-connect-client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public harmony-connect-client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Identity Chain Info Retrieve the details about a particular Identity Chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>IdentityChain</returns>
        public IdentityChain GetIdChainbyId (string identityChainId)
        {
             ApiResponse<IdentityChain> localVarResponse = GetIdChainbyIdWithHttpInfo(identityChainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Chain Info Retrieve the details about a particular Identity Chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>ApiResponse of IdentityChain</returns>
        public ApiResponse< IdentityChain > GetIdChainbyIdWithHttpInfo (string identityChainId)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->GetIdChainbyId");

            var localVarPath = "/identities/{identity_chain_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdChainbyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityChain>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdentityChain) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityChain)));
        }

        /// <summary>
        /// Get Identity Chain Info Retrieve the details about a particular Identity Chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>Task of IdentityChain</returns>
        public async System.Threading.Tasks.Task<IdentityChain> GetIdChainbyIdAsync (string identityChainId)
        {
             ApiResponse<IdentityChain> localVarResponse = await GetIdChainbyIdAsyncWithHttpInfo(identityChainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Identity Chain Info Retrieve the details about a particular Identity Chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <returns>Task of ApiResponse (IdentityChain)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityChain>> GetIdChainbyIdAsyncWithHttpInfo (string identityChainId)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->GetIdChainbyId");

            var localVarPath = "/identities/{identity_chain_id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetIdChainbyId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityChain>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdentityChain) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityChain)));
        }

        /// <summary>
        /// Get Key Info Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>IdentityKey</returns>
        public IdentityKey GetKeybyEntryHash (string identityChainId, string keyString)
        {
             ApiResponse<IdentityKey> localVarResponse = GetKeybyEntryHashWithHttpInfo(identityChainId, keyString);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Key Info Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>ApiResponse of IdentityKey</returns>
        public ApiResponse< IdentityKey > GetKeybyEntryHashWithHttpInfo (string identityChainId, string keyString)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->GetKeybyEntryHash");
            // verify the required parameter 'keyString' is set
            if (keyString == null)
                throw new ApiException(400, "Missing required parameter 'keyString' when calling IdentitiesApi->GetKeybyEntryHash");

            var localVarPath = "/identities/{identity_chain_id}/keys/{key_string}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter
            if (keyString != null) localVarPathParams.Add("key_string", this.Configuration.ApiClient.ParameterToString(keyString)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeybyEntryHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdentityKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityKey)));
        }

        /// <summary>
        /// Get Key Info Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>Task of IdentityKey</returns>
        public async System.Threading.Tasks.Task<IdentityKey> GetKeybyEntryHashAsync (string identityChainId, string keyString)
        {
             ApiResponse<IdentityKey> localVarResponse = await GetKeybyEntryHashAsyncWithHttpInfo(identityChainId, keyString);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Key Info Retreive information about a specific public key for a given Identity, including the heights at which the key was activated and retired if applicable.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="keyString">The public key string. Must be in base58 idpub format.</param>
        /// <returns>Task of ApiResponse (IdentityKey)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IdentityKey>> GetKeybyEntryHashAsyncWithHttpInfo (string identityChainId, string keyString)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->GetKeybyEntryHash");
            // verify the required parameter 'keyString' is set
            if (keyString == null)
                throw new ApiException(400, "Missing required parameter 'keyString' when calling IdentitiesApi->GetKeybyEntryHash");

            var localVarPath = "/identities/{identity_chain_id}/keys/{key_string}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter
            if (keyString != null) localVarPathParams.Add("key_string", this.Configuration.ApiClient.ParameterToString(keyString)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeybyEntryHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IdentityKey>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (IdentityKey) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdentityKey)));
        }

        /// <summary>
        /// Get Identity Chain&#39;s Keys Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>KeyList</returns>
        public KeyList GetKeysbyIdChainId (string identityChainId, int? limit = null, int? offset = null)
        {
             ApiResponse<KeyList> localVarResponse = GetKeysbyIdChainIdWithHttpInfo(identityChainId, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Identity Chain&#39;s Keys Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ApiResponse of KeyList</returns>
        public ApiResponse< KeyList > GetKeysbyIdChainIdWithHttpInfo (string identityChainId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->GetKeysbyIdChainId");

            var localVarPath = "/identities/{identity_chain_id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeysbyIdChainId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyList)));
        }

        /// <summary>
        /// Get Identity Chain&#39;s Keys Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of KeyList</returns>
        public async System.Threading.Tasks.Task<KeyList> GetKeysbyIdChainIdAsync (string identityChainId, int? limit = null, int? offset = null)
        {
             ApiResponse<KeyList> localVarResponse = await GetKeysbyIdChainIdAsyncWithHttpInfo(identityChainId, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Identity Chain&#39;s Keys Returns all of the keys, past and present, associated with a particular Identity. Results are paginated and ordered by activation height.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ApiResponse (KeyList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KeyList>> GetKeysbyIdChainIdAsyncWithHttpInfo (string identityChainId, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->GetKeysbyIdChainId");

            var localVarPath = "/identities/{identity_chain_id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetKeysbyIdChainId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KeyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (KeyList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KeyList)));
        }

        /// <summary>
        /// Create Identity Chain Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>ChainShort</returns>
        public ChainShort PostIdChain (IdentityCreate identityCreate)
        {
             ApiResponse<ChainShort> localVarResponse = PostIdChainWithHttpInfo(identityCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create Identity Chain Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>ApiResponse of ChainShort</returns>
        public ApiResponse< ChainShort > PostIdChainWithHttpInfo (IdentityCreate identityCreate)
        {
            // verify the required parameter 'identityCreate' is set
            if (identityCreate == null)
                throw new ApiException(400, "Missing required parameter 'identityCreate' when calling IdentitiesApi->PostIdChain");

            var localVarPath = "/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityCreate != null && identityCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(identityCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identityCreate; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostIdChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainShort)));
        }

        /// <summary>
        /// Create Identity Chain Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>Task of ChainShort</returns>
        public async System.Threading.Tasks.Task<ChainShort> PostIdChainAsync (IdentityCreate identityCreate)
        {
             ApiResponse<ChainShort> localVarResponse = await PostIdChainAsyncWithHttpInfo(identityCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create Identity Chain Creates a new identity chain. To create the chain, you&#39;ll need to include a unique name array and an array of public keys. If successful, returns information about the chain that was created.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityCreate"></param>
        /// <returns>Task of ApiResponse (ChainShort)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ChainShort>> PostIdChainAsyncWithHttpInfo (IdentityCreate identityCreate)
        {
            // verify the required parameter 'identityCreate' is set
            if (identityCreate == null)
                throw new ApiException(400, "Missing required parameter 'identityCreate' when calling IdentitiesApi->PostIdChain");

            var localVarPath = "/identities";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityCreate != null && identityCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(identityCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identityCreate; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostIdChain", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ChainShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ChainShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ChainShort)));
        }

        /// <summary>
        /// Replace Identity Key Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>EntryShort</returns>
        public EntryShort PostKeytoIdChainId (string identityChainId, IdentityKeyReplace identityKeyReplace)
        {
             ApiResponse<EntryShort> localVarResponse = PostKeytoIdChainIdWithHttpInfo(identityChainId, identityKeyReplace);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Replace Identity Key Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>ApiResponse of EntryShort</returns>
        public ApiResponse< EntryShort > PostKeytoIdChainIdWithHttpInfo (string identityChainId, IdentityKeyReplace identityKeyReplace)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->PostKeytoIdChainId");
            // verify the required parameter 'identityKeyReplace' is set
            if (identityKeyReplace == null)
                throw new ApiException(400, "Missing required parameter 'identityKeyReplace' when calling IdentitiesApi->PostKeytoIdChainId");

            var localVarPath = "/identities/{identity_chain_id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter
            if (identityKeyReplace != null && identityKeyReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(identityKeyReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identityKeyReplace; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostKeytoIdChainId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntryShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryShort)));
        }

        /// <summary>
        /// Replace Identity Key Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>Task of EntryShort</returns>
        public async System.Threading.Tasks.Task<EntryShort> PostKeytoIdChainIdAsync (string identityChainId, IdentityKeyReplace identityKeyReplace)
        {
             ApiResponse<EntryShort> localVarResponse = await PostKeytoIdChainIdAsyncWithHttpInfo(identityChainId, identityKeyReplace);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Replace Identity Key Retires an existing key from an identity and replaces it with a new one. To do this, a user must send the key to be replaced (&#x60;old_key&#x60;), the &#x60;new_key&#x60;, the signing key that authorizes the replacement and a signed message from the signing key. The signing key must be either equal to or senior to the key that is being replaced.  *Note: You may not reuse a key. If the &#x60;new_key&#x60; has been used by this Identity at any level, the replacement will fail.*
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="identityChainId">The hex encoded string that points to the identity&#39;s chain</param>
        /// <param name="identityKeyReplace"></param>
        /// <returns>Task of ApiResponse (EntryShort)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntryShort>> PostKeytoIdChainIdAsyncWithHttpInfo (string identityChainId, IdentityKeyReplace identityKeyReplace)
        {
            // verify the required parameter 'identityChainId' is set
            if (identityChainId == null)
                throw new ApiException(400, "Missing required parameter 'identityChainId' when calling IdentitiesApi->PostKeytoIdChainId");
            // verify the required parameter 'identityKeyReplace' is set
            if (identityKeyReplace == null)
                throw new ApiException(400, "Missing required parameter 'identityKeyReplace' when calling IdentitiesApi->PostKeytoIdChainId");

            var localVarPath = "/identities/{identity_chain_id}/keys";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (identityChainId != null) localVarPathParams.Add("identity_chain_id", this.Configuration.ApiClient.ParameterToString(identityChainId)); // path parameter
            if (identityKeyReplace != null && identityKeyReplace.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(identityKeyReplace); // http body (model) parameter
            }
            else
            {
                localVarPostBody = identityKeyReplace; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostKeytoIdChainId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntryShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryShort)));
        }

    }
}
