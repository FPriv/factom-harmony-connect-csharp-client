/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using harmony-connect-client.Client;
using harmony-connect-client.Model;

namespace harmony-connect-client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEntriesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// List all entries contained on the specified chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>EntryList</returns>
        EntryList GetEntriesByChainID (string chainId, int? limit = null, int? offset = null, string stages = null);

        /// <summary>
        /// Get Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// List all entries contained on the specified chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>ApiResponse of EntryList</returns>
        ApiResponse<EntryList> GetEntriesByChainIDWithHttpInfo (string chainId, int? limit = null, int? offset = null, string stages = null);
        /// <summary>
        /// Get Entry Info
        /// </summary>
        /// <remarks>
        /// Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>Entry</returns>
        Entry GetEntryByHash (string chainId, string entryHash);

        /// <summary>
        /// Get Entry Info
        /// </summary>
        /// <remarks>
        /// Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>ApiResponse of Entry</returns>
        ApiResponse<Entry> GetEntryByHashWithHttpInfo (string chainId, string entryHash);
        /// <summary>
        /// Get Chain&#39;s First Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the first entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Entry</returns>
        Entry GetFirstEntry (string chainId);

        /// <summary>
        /// Get Chain&#39;s First Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the first entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>ApiResponse of Entry</returns>
        ApiResponse<Entry> GetFirstEntryWithHttpInfo (string chainId);
        /// <summary>
        /// Get Chain&#39;s Last Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the last entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Entry</returns>
        Entry GetLastEntry (string chainId);

        /// <summary>
        /// Get Chain&#39;s Last Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the last entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>ApiResponse of Entry</returns>
        ApiResponse<Entry> GetLastEntryWithHttpInfo (string chainId);
        /// <summary>
        /// Search Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>EntrySearchResponse</returns>
        EntrySearchResponse PostEntriesSearch (string chainId, SearchBody searchBody, int? limit = null, int? offset = null);

        /// <summary>
        /// Search Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ApiResponse of EntrySearchResponse</returns>
        ApiResponse<EntrySearchResponse> PostEntriesSearchWithHttpInfo (string chainId, SearchBody searchBody, int? limit = null, int? offset = null);
        /// <summary>
        /// Create an Entry
        /// </summary>
        /// <remarks>
        /// Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>EntryShort</returns>
        EntryShort PostEntryToChainID (string chainId, EntryCreate entryCreate);

        /// <summary>
        /// Create an Entry
        /// </summary>
        /// <remarks>
        /// Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>ApiResponse of EntryShort</returns>
        ApiResponse<EntryShort> PostEntryToChainIDWithHttpInfo (string chainId, EntryCreate entryCreate);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Get Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// List all entries contained on the specified chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of EntryList</returns>
        System.Threading.Tasks.Task<EntryList> GetEntriesByChainIDAsync (string chainId, int? limit = null, int? offset = null, string stages = null);

        /// <summary>
        /// Get Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// List all entries contained on the specified chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (EntryList)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntryList>> GetEntriesByChainIDAsyncWithHttpInfo (string chainId, int? limit = null, int? offset = null, string stages = null);
        /// <summary>
        /// Get Entry Info
        /// </summary>
        /// <remarks>
        /// Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>Task of Entry</returns>
        System.Threading.Tasks.Task<Entry> GetEntryByHashAsync (string chainId, string entryHash);

        /// <summary>
        /// Get Entry Info
        /// </summary>
        /// <remarks>
        /// Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entry>> GetEntryByHashAsyncWithHttpInfo (string chainId, string entryHash);
        /// <summary>
        /// Get Chain&#39;s First Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the first entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of Entry</returns>
        System.Threading.Tasks.Task<Entry> GetFirstEntryAsync (string chainId);

        /// <summary>
        /// Get Chain&#39;s First Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the first entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entry>> GetFirstEntryAsyncWithHttpInfo (string chainId);
        /// <summary>
        /// Get Chain&#39;s Last Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the last entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of Entry</returns>
        System.Threading.Tasks.Task<Entry> GetLastEntryAsync (string chainId);

        /// <summary>
        /// Get Chain&#39;s Last Entry
        /// </summary>
        /// <remarks>
        /// Retrieve the last entry that has been saved to this chain.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        System.Threading.Tasks.Task<ApiResponse<Entry>> GetLastEntryAsyncWithHttpInfo (string chainId);
        /// <summary>
        /// Search Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of EntrySearchResponse</returns>
        System.Threading.Tasks.Task<EntrySearchResponse> PostEntriesSearchAsync (string chainId, SearchBody searchBody, int? limit = null, int? offset = null);

        /// <summary>
        /// Search Chain&#39;s Entries
        /// </summary>
        /// <remarks>
        /// Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ApiResponse (EntrySearchResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntrySearchResponse>> PostEntriesSearchAsyncWithHttpInfo (string chainId, SearchBody searchBody, int? limit = null, int? offset = null);
        /// <summary>
        /// Create an Entry
        /// </summary>
        /// <remarks>
        /// Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>Task of EntryShort</returns>
        System.Threading.Tasks.Task<EntryShort> PostEntryToChainIDAsync (string chainId, EntryCreate entryCreate);

        /// <summary>
        /// Create an Entry
        /// </summary>
        /// <remarks>
        /// Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </remarks>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>Task of ApiResponse (EntryShort)</returns>
        System.Threading.Tasks.Task<ApiResponse<EntryShort>> PostEntryToChainIDAsyncWithHttpInfo (string chainId, EntryCreate entryCreate);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EntriesApi : IEntriesApi
    {
        private harmony-connect-client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EntriesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EntriesApi(String basePath)
        {
            this.Configuration = new harmony-connect-client.Client.Configuration { BasePath = basePath };

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntriesApi"/> class
        /// </summary>
        /// <returns></returns>
        public EntriesApi()
        {
            this.Configuration = harmony-connect-client.Client.Configuration.Default;

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EntriesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EntriesApi(harmony-connect-client.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = harmony-connect-client.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = harmony-connect-client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public harmony-connect-client.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public harmony-connect-client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Get Chain&#39;s Entries List all entries contained on the specified chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>EntryList</returns>
        public EntryList GetEntriesByChainID (string chainId, int? limit = null, int? offset = null, string stages = null)
        {
             ApiResponse<EntryList> localVarResponse = GetEntriesByChainIDWithHttpInfo(chainId, limit, offset, stages);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chain&#39;s Entries List all entries contained on the specified chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>ApiResponse of EntryList</returns>
        public ApiResponse< EntryList > GetEntriesByChainIDWithHttpInfo (string chainId, int? limit = null, int? offset = null, string stages = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetEntriesByChainID");

            var localVarPath = "/chains/{chain_id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (stages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stages", stages)); // query parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntriesByChainID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryList)));
        }

        /// <summary>
        /// Get Chain&#39;s Entries List all entries contained on the specified chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of EntryList</returns>
        public async System.Threading.Tasks.Task<EntryList> GetEntriesByChainIDAsync (string chainId, int? limit = null, int? offset = null, string stages = null)
        {
             ApiResponse<EntryList> localVarResponse = await GetEntriesByChainIDAsyncWithHttpInfo(chainId, limit, offset, stages);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chain&#39;s Entries List all entries contained on the specified chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <param name="stages">The immutability stages you want to restrict results to. You can choose any from &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If you would like to search among multiple stages, send them in a comma separated string. For example: &#x60;&#39;replicated,factom&#39;&#x60;. (optional)</param>
        /// <returns>Task of ApiResponse (EntryList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntryList>> GetEntriesByChainIDAsyncWithHttpInfo (string chainId, int? limit = null, int? offset = null, string stages = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetEntriesByChainID");

            var localVarPath = "/chains/{chain_id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (stages != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "stages", stages)); // query parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntriesByChainID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntryList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryList)));
        }

        /// <summary>
        /// Get Entry Info Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>Entry</returns>
        public Entry GetEntryByHash (string chainId, string entryHash)
        {
             ApiResponse<Entry> localVarResponse = GetEntryByHashWithHttpInfo(chainId, entryHash);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Entry Info Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>ApiResponse of Entry</returns>
        public ApiResponse< Entry > GetEntryByHashWithHttpInfo (string chainId, string entryHash)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetEntryByHash");
            // verify the required parameter 'entryHash' is set
            if (entryHash == null)
                throw new ApiException(400, "Missing required parameter 'entryHash' when calling EntriesApi->GetEntryByHash");

            var localVarPath = "/chains/{chain_id}/entries/{entry_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryHash != null) localVarPathParams.Add("entry_hash", this.Configuration.ApiClient.ParameterToString(entryHash)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntryByHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
        }

        /// <summary>
        /// Get Entry Info Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>Task of Entry</returns>
        public async System.Threading.Tasks.Task<Entry> GetEntryByHashAsync (string chainId, string entryHash)
        {
             ApiResponse<Entry> localVarResponse = await GetEntryByHashAsyncWithHttpInfo(chainId, entryHash);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Entry Info Returns information about a specific entry on Connect. The requested entry must be specified using the Chain ID and Entry Hash.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryHash">The unique identitfier of the entry.</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entry>> GetEntryByHashAsyncWithHttpInfo (string chainId, string entryHash)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetEntryByHash");
            // verify the required parameter 'entryHash' is set
            if (entryHash == null)
                throw new ApiException(400, "Missing required parameter 'entryHash' when calling EntriesApi->GetEntryByHash");

            var localVarPath = "/chains/{chain_id}/entries/{entry_hash}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryHash != null) localVarPathParams.Add("entry_hash", this.Configuration.ApiClient.ParameterToString(entryHash)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetEntryByHash", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
        }

        /// <summary>
        /// Get Chain&#39;s First Entry Retrieve the first entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Entry</returns>
        public Entry GetFirstEntry (string chainId)
        {
             ApiResponse<Entry> localVarResponse = GetFirstEntryWithHttpInfo(chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chain&#39;s First Entry Retrieve the first entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>ApiResponse of Entry</returns>
        public ApiResponse< Entry > GetFirstEntryWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetFirstEntry");

            var localVarPath = "/chains/{chain_id}/entries/first";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirstEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
        }

        /// <summary>
        /// Get Chain&#39;s First Entry Retrieve the first entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of Entry</returns>
        public async System.Threading.Tasks.Task<Entry> GetFirstEntryAsync (string chainId)
        {
             ApiResponse<Entry> localVarResponse = await GetFirstEntryAsyncWithHttpInfo(chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chain&#39;s First Entry Retrieve the first entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entry>> GetFirstEntryAsyncWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetFirstEntry");

            var localVarPath = "/chains/{chain_id}/entries/first";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetFirstEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
        }

        /// <summary>
        /// Get Chain&#39;s Last Entry Retrieve the last entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Entry</returns>
        public Entry GetLastEntry (string chainId)
        {
             ApiResponse<Entry> localVarResponse = GetLastEntryWithHttpInfo(chainId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get Chain&#39;s Last Entry Retrieve the last entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>ApiResponse of Entry</returns>
        public ApiResponse< Entry > GetLastEntryWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetLastEntry");

            var localVarPath = "/chains/{chain_id}/entries/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
        }

        /// <summary>
        /// Get Chain&#39;s Last Entry Retrieve the last entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of Entry</returns>
        public async System.Threading.Tasks.Task<Entry> GetLastEntryAsync (string chainId)
        {
             ApiResponse<Entry> localVarResponse = await GetLastEntryAsyncWithHttpInfo(chainId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get Chain&#39;s Last Entry Retrieve the last entry that has been saved to this chain.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <returns>Task of ApiResponse (Entry)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Entry>> GetLastEntryAsyncWithHttpInfo (string chainId)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->GetLastEntry");

            var localVarPath = "/chains/{chain_id}/entries/last";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLastEntry", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Entry>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Entry) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Entry)));
        }

        /// <summary>
        /// Search Chain&#39;s Entries Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>EntrySearchResponse</returns>
        public EntrySearchResponse PostEntriesSearch (string chainId, SearchBody searchBody, int? limit = null, int? offset = null)
        {
             ApiResponse<EntrySearchResponse> localVarResponse = PostEntriesSearchWithHttpInfo(chainId, searchBody, limit, offset);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Chain&#39;s Entries Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>ApiResponse of EntrySearchResponse</returns>
        public ApiResponse< EntrySearchResponse > PostEntriesSearchWithHttpInfo (string chainId, SearchBody searchBody, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->PostEntriesSearch");
            // verify the required parameter 'searchBody' is set
            if (searchBody == null)
                throw new ApiException(400, "Missing required parameter 'searchBody' when calling EntriesApi->PostEntriesSearch");

            var localVarPath = "/chains/{chain_id}/entries/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (searchBody != null && searchBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchBody; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEntriesSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntrySearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntrySearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntrySearchResponse)));
        }

        /// <summary>
        /// Search Chain&#39;s Entries Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of EntrySearchResponse</returns>
        public async System.Threading.Tasks.Task<EntrySearchResponse> PostEntriesSearchAsync (string chainId, SearchBody searchBody, int? limit = null, int? offset = null)
        {
             ApiResponse<EntrySearchResponse> localVarResponse = await PostEntriesSearchAsyncWithHttpInfo(chainId, searchBody, limit, offset);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Chain&#39;s Entries Find all of the entries within the specified chain that have the requested &#x60;external_ids&#x60;.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="searchBody"></param>
        /// <param name="limit">The number of items you would like back in each page. (optional)</param>
        /// <param name="offset">The offset parameter allows you to select which item you would like to start from when you get back a list from Connect. For example, if you&#39;ve already seen the first 15 items and you&#39;d like the next set, you would send an offset of 15. &#x60;offset&#x3D;0&#x60; starts from the first item of the set and is the default position. (optional)</param>
        /// <returns>Task of ApiResponse (EntrySearchResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntrySearchResponse>> PostEntriesSearchAsyncWithHttpInfo (string chainId, SearchBody searchBody, int? limit = null, int? offset = null)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->PostEntriesSearch");
            // verify the required parameter 'searchBody' is set
            if (searchBody == null)
                throw new ApiException(400, "Missing required parameter 'searchBody' when calling EntriesApi->PostEntriesSearch");

            var localVarPath = "/chains/{chain_id}/entries/search";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (limit != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "limit", limit)); // query parameter
            if (offset != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "offset", offset)); // query parameter
            if (searchBody != null && searchBody.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(searchBody); // http body (model) parameter
            }
            else
            {
                localVarPostBody = searchBody; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEntriesSearch", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntrySearchResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntrySearchResponse) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntrySearchResponse)));
        }

        /// <summary>
        /// Create an Entry Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>EntryShort</returns>
        public EntryShort PostEntryToChainID (string chainId, EntryCreate entryCreate)
        {
             ApiResponse<EntryShort> localVarResponse = PostEntryToChainIDWithHttpInfo(chainId, entryCreate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an Entry Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>ApiResponse of EntryShort</returns>
        public ApiResponse< EntryShort > PostEntryToChainIDWithHttpInfo (string chainId, EntryCreate entryCreate)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->PostEntryToChainID");
            // verify the required parameter 'entryCreate' is set
            if (entryCreate == null)
                throw new ApiException(400, "Missing required parameter 'entryCreate' when calling EntriesApi->PostEntryToChainID");

            var localVarPath = "/chains/{chain_id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryCreate != null && entryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entryCreate; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEntryToChainID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntryShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryShort)));
        }

        /// <summary>
        /// Create an Entry Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>Task of EntryShort</returns>
        public async System.Threading.Tasks.Task<EntryShort> PostEntryToChainIDAsync (string chainId, EntryCreate entryCreate)
        {
             ApiResponse<EntryShort> localVarResponse = await PostEntryToChainIDAsyncWithHttpInfo(chainId, entryCreate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an Entry Create a new entry for the selected chain. Content and external id must be uploaded in Base64 format.
        /// </summary>
        /// <exception cref="harmony-connect-client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="chainId">Chain identifier</param>
        /// <param name="entryCreate"></param>
        /// <returns>Task of ApiResponse (EntryShort)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<EntryShort>> PostEntryToChainIDAsyncWithHttpInfo (string chainId, EntryCreate entryCreate)
        {
            // verify the required parameter 'chainId' is set
            if (chainId == null)
                throw new ApiException(400, "Missing required parameter 'chainId' when calling EntriesApi->PostEntryToChainID");
            // verify the required parameter 'entryCreate' is set
            if (entryCreate == null)
                throw new ApiException(400, "Missing required parameter 'entryCreate' when calling EntriesApi->PostEntryToChainID");

            var localVarPath = "/chains/{chain_id}/entries";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (chainId != null) localVarPathParams.Add("chain_id", this.Configuration.ApiClient.ParameterToString(chainId)); // path parameter
            if (entryCreate != null && entryCreate.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(entryCreate); // http body (model) parameter
            }
            else
            {
                localVarPostBody = entryCreate; // byte array
            }

            // authentication (AppId) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_id")))
            {
                localVarHeaderParams["app_id"] = this.Configuration.GetApiKeyWithPrefix("app_id");
            }
            // authentication (AppKey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("app_key")))
            {
                localVarHeaderParams["app_key"] = this.Configuration.GetApiKeyWithPrefix("app_key");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PostEntryToChainID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<EntryShort>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (EntryShort) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EntryShort)));
        }

    }
}
