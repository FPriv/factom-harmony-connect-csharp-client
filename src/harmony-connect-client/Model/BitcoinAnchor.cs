/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// BitcoinAnchor
    /// </summary>
    [DataContract]
    public partial class BitcoinAnchor :  IEquatable<BitcoinAnchor>, IValidatableObject
    {
        /// <summary>
        /// Indicates the blockchain network that contains this anchor.
        /// </summary>
        /// <value>Indicates the blockchain network that contains this anchor.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetworkEnum
        {
            /// <summary>
            /// Enum Bitcoin for value: bitcoin
            /// </summary>
            [EnumMember(Value = "bitcoin")]
            Bitcoin = 1,

            /// <summary>
            /// Enum Ethereum for value: ethereum
            /// </summary>
            [EnumMember(Value = "ethereum")]
            Ethereum = 2,

            /// <summary>
            /// Enum Factom for value: factom
            /// </summary>
            [EnumMember(Value = "factom")]
            Factom = 3

        }

        /// <summary>
        /// Indicates the blockchain network that contains this anchor.
        /// </summary>
        /// <value>Indicates the blockchain network that contains this anchor.</value>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public NetworkEnum Network { get; set; }
        /// <summary>
        /// The confirmation status of the anchor. Either pending or confirmed.
        /// </summary>
        /// <value>The confirmation status of the anchor. Either pending or confirmed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2

        }

        /// <summary>
        /// The confirmation status of the anchor. Either pending or confirmed.
        /// </summary>
        /// <value>The confirmation status of the anchor. Either pending or confirmed.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="BitcoinAnchor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BitcoinAnchor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BitcoinAnchor" /> class.
        /// </summary>
        /// <param name="network">Indicates the blockchain network that contains this anchor. (required).</param>
        /// <param name="status">The confirmation status of the anchor. Either pending or confirmed. (required).</param>
        /// <param name="txId">The bitcoin transaction ID for the transaction that includes the anchor message..</param>
        /// <param name="blockHash">The hash of the bitcoin block that contains the anchor message..</param>
        public BitcoinAnchor(NetworkEnum network = default(NetworkEnum), StatusEnum status = default(StatusEnum), string txId = default(string), string blockHash = default(string))
        {
            // to ensure "network" is required (not null)
            if (network == null)
            {
                throw new InvalidDataException("network is a required property for BitcoinAnchor and cannot be null");
            }
            else
            {
                this.Network = network;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for BitcoinAnchor and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.TxId = txId;
            this.BlockHash = blockHash;
        }
        


        /// <summary>
        /// The bitcoin transaction ID for the transaction that includes the anchor message.
        /// </summary>
        /// <value>The bitcoin transaction ID for the transaction that includes the anchor message.</value>
        [DataMember(Name="tx_id", EmitDefaultValue=false)]
        public string TxId { get; set; }

        /// <summary>
        /// The hash of the bitcoin block that contains the anchor message.
        /// </summary>
        /// <value>The hash of the bitcoin block that contains the anchor message.</value>
        [DataMember(Name="block_hash", EmitDefaultValue=false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BitcoinAnchor {\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BitcoinAnchor);
        }

        /// <summary>
        /// Returns true if BitcoinAnchor instances are equal
        /// </summary>
        /// <param name="input">Instance of BitcoinAnchor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BitcoinAnchor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TxId == input.TxId ||
                    (this.TxId != null &&
                    this.TxId.Equals(input.TxId))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Network != null)
                    hashCode = hashCode * 59 + this.Network.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TxId != null)
                    hashCode = hashCode * 59 + this.TxId.GetHashCode();
                if (this.BlockHash != null)
                    hashCode = hashCode * 59 + this.BlockHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
