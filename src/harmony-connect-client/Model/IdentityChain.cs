/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// IdentityChain
    /// </summary>
    [DataContract]
    public partial class IdentityChain :  IEquatable<IdentityChain>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityChain" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityChain() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityChain" /> class.
        /// </summary>
        /// <param name="version">The Identity Chain’s schema version. This details the format of this digital identity. More information about Factom Identity Chain schemas can be seen [here](). (required).</param>
        /// <param name="stage">The immutability stage that this chain has reached. The identity can be considered in use once it reaches the &#x60;factom&#x60; stage. (required).</param>
        /// <param name="createdHeight">The block height at which this chain was written into the Factom blockchain. This is &#x60;null&#x60; if the chain has not reached the &#x60;factom&#x60; stage..</param>
        /// <param name="chainId">The Chain ID for this identity chain. (required).</param>
        /// <param name="name">A unique array of strings that are associated with this identity. (required).</param>
        /// <param name="activeKeys">Contains the currently active public keys for this identity. (required).</param>
        /// <param name="allKeysHref">An API link to retrieve the keys for this identity. (required).</param>
        public IdentityChain(string version = default(string), string stage = default(string), int? createdHeight = default(int?), string chainId = default(string), List<string> name = default(List<string>), List<IdentityKeyShort> activeKeys = default(List<IdentityKeyShort>), string allKeysHref = default(string))
        {
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for IdentityChain and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "stage" is required (not null)
            if (stage == null)
            {
                throw new InvalidDataException("stage is a required property for IdentityChain and cannot be null");
            }
            else
            {
                this.Stage = stage;
            }
            // to ensure "chainId" is required (not null)
            if (chainId == null)
            {
                throw new InvalidDataException("chainId is a required property for IdentityChain and cannot be null");
            }
            else
            {
                this.ChainId = chainId;
            }
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for IdentityChain and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            // to ensure "activeKeys" is required (not null)
            if (activeKeys == null)
            {
                throw new InvalidDataException("activeKeys is a required property for IdentityChain and cannot be null");
            }
            else
            {
                this.ActiveKeys = activeKeys;
            }
            // to ensure "allKeysHref" is required (not null)
            if (allKeysHref == null)
            {
                throw new InvalidDataException("allKeysHref is a required property for IdentityChain and cannot be null");
            }
            else
            {
                this.AllKeysHref = allKeysHref;
            }
            this.CreatedHeight = createdHeight;
        }
        
        /// <summary>
        /// The Identity Chain’s schema version. This details the format of this digital identity. More information about Factom Identity Chain schemas can be seen [here]().
        /// </summary>
        /// <value>The Identity Chain’s schema version. This details the format of this digital identity. More information about Factom Identity Chain schemas can be seen [here]().</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The immutability stage that this chain has reached. The identity can be considered in use once it reaches the &#x60;factom&#x60; stage.
        /// </summary>
        /// <value>The immutability stage that this chain has reached. The identity can be considered in use once it reaches the &#x60;factom&#x60; stage.</value>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public string Stage { get; set; }

        /// <summary>
        /// The block height at which this chain was written into the Factom blockchain. This is &#x60;null&#x60; if the chain has not reached the &#x60;factom&#x60; stage.
        /// </summary>
        /// <value>The block height at which this chain was written into the Factom blockchain. This is &#x60;null&#x60; if the chain has not reached the &#x60;factom&#x60; stage.</value>
        [DataMember(Name="created_height", EmitDefaultValue=false)]
        public int? CreatedHeight { get; set; }

        /// <summary>
        /// The Chain ID for this identity chain.
        /// </summary>
        /// <value>The Chain ID for this identity chain.</value>
        [DataMember(Name="chain_id", EmitDefaultValue=false)]
        public string ChainId { get; set; }

        /// <summary>
        /// A unique array of strings that are associated with this identity.
        /// </summary>
        /// <value>A unique array of strings that are associated with this identity.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public List<string> Name { get; set; }

        /// <summary>
        /// Contains the currently active public keys for this identity.
        /// </summary>
        /// <value>Contains the currently active public keys for this identity.</value>
        [DataMember(Name="active_keys", EmitDefaultValue=false)]
        public List<IdentityKeyShort> ActiveKeys { get; set; }

        /// <summary>
        /// An API link to retrieve the keys for this identity.
        /// </summary>
        /// <value>An API link to retrieve the keys for this identity.</value>
        [DataMember(Name="all_keys_href", EmitDefaultValue=false)]
        public string AllKeysHref { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityChain {\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  CreatedHeight: ").Append(CreatedHeight).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ActiveKeys: ").Append(ActiveKeys).Append("\n");
            sb.Append("  AllKeysHref: ").Append(AllKeysHref).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityChain);
        }

        /// <summary>
        /// Returns true if IdentityChain instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityChain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityChain input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.CreatedHeight == input.CreatedHeight ||
                    (this.CreatedHeight != null &&
                    this.CreatedHeight.Equals(input.CreatedHeight))
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    (this.ChainId != null &&
                    this.ChainId.Equals(input.ChainId))
                ) && 
                (
                    this.Name == input.Name ||
                    this.Name != null &&
                    this.Name.SequenceEqual(input.Name)
                ) && 
                (
                    this.ActiveKeys == input.ActiveKeys ||
                    this.ActiveKeys != null &&
                    this.ActiveKeys.SequenceEqual(input.ActiveKeys)
                ) && 
                (
                    this.AllKeysHref == input.AllKeysHref ||
                    (this.AllKeysHref != null &&
                    this.AllKeysHref.Equals(input.AllKeysHref))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.CreatedHeight != null)
                    hashCode = hashCode * 59 + this.CreatedHeight.GetHashCode();
                if (this.ChainId != null)
                    hashCode = hashCode * 59 + this.ChainId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.ActiveKeys != null)
                    hashCode = hashCode * 59 + this.ActiveKeys.GetHashCode();
                if (this.AllKeysHref != null)
                    hashCode = hashCode * 59 + this.AllKeysHref.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
