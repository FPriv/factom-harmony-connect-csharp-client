/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// A single factoid block from the factom blockchain.
    /// </summary>
    [DataContract]
    public partial class FBlockLong :  IEquatable<FBlockLong>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FBlockLong" /> class.
        /// </summary>
        /// <param name="keymr">The SHA256 Hash of this entry..</param>
        /// <param name="prev">prev.</param>
        /// <param name="next">next.</param>
        /// <param name="dblock">dblock.</param>
        /// <param name="ecRate">The Entry credit rate at the time this block was created..</param>
        /// <param name="fctTotalInputs">The number of factoid inputs in this block..</param>
        /// <param name="fctTotalOutputs">The number of factoid outputs in this block..</param>
        /// <param name="ecTotalCreated">The total number of entry credits purchased in this block..</param>
        /// <param name="transactions">A list of all of the transactions that occur in this block..</param>
        public FBlockLong(string keymr = default(string), FBlockLongPrev prev = default(FBlockLongPrev), FBlockLongNext next = default(FBlockLongNext), ABlockLongDblock dblock = default(ABlockLongDblock), string ecRate = default(string), string fctTotalInputs = default(string), string fctTotalOutputs = default(string), string ecTotalCreated = default(string), string transactions = default(string))
        {
            this.Keymr = keymr;
            this.Prev = prev;
            this.Next = next;
            this.Dblock = dblock;
            this.EcRate = ecRate;
            this.FctTotalInputs = fctTotalInputs;
            this.FctTotalOutputs = fctTotalOutputs;
            this.EcTotalCreated = ecTotalCreated;
            this.Transactions = transactions;
        }
        
        /// <summary>
        /// The SHA256 Hash of this entry.
        /// </summary>
        /// <value>The SHA256 Hash of this entry.</value>
        [DataMember(Name="keymr", EmitDefaultValue=false)]
        public string Keymr { get; set; }

        /// <summary>
        /// Gets or Sets Prev
        /// </summary>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public FBlockLongPrev Prev { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public FBlockLongNext Next { get; set; }

        /// <summary>
        /// Gets or Sets Dblock
        /// </summary>
        [DataMember(Name="dblock", EmitDefaultValue=false)]
        public ABlockLongDblock Dblock { get; set; }

        /// <summary>
        /// The Entry credit rate at the time this block was created.
        /// </summary>
        /// <value>The Entry credit rate at the time this block was created.</value>
        [DataMember(Name="ec_rate", EmitDefaultValue=false)]
        public string EcRate { get; set; }

        /// <summary>
        /// The number of factoid inputs in this block.
        /// </summary>
        /// <value>The number of factoid inputs in this block.</value>
        [DataMember(Name="fct_total_inputs", EmitDefaultValue=false)]
        public string FctTotalInputs { get; set; }

        /// <summary>
        /// The number of factoid outputs in this block.
        /// </summary>
        /// <value>The number of factoid outputs in this block.</value>
        [DataMember(Name="fct_total_outputs", EmitDefaultValue=false)]
        public string FctTotalOutputs { get; set; }

        /// <summary>
        /// The total number of entry credits purchased in this block.
        /// </summary>
        /// <value>The total number of entry credits purchased in this block.</value>
        [DataMember(Name="ec_total_created", EmitDefaultValue=false)]
        public string EcTotalCreated { get; set; }

        /// <summary>
        /// A list of all of the transactions that occur in this block.
        /// </summary>
        /// <value>A list of all of the transactions that occur in this block.</value>
        [DataMember(Name="transactions", EmitDefaultValue=false)]
        public string Transactions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FBlockLong {\n");
            sb.Append("  Keymr: ").Append(Keymr).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Dblock: ").Append(Dblock).Append("\n");
            sb.Append("  EcRate: ").Append(EcRate).Append("\n");
            sb.Append("  FctTotalInputs: ").Append(FctTotalInputs).Append("\n");
            sb.Append("  FctTotalOutputs: ").Append(FctTotalOutputs).Append("\n");
            sb.Append("  EcTotalCreated: ").Append(EcTotalCreated).Append("\n");
            sb.Append("  Transactions: ").Append(Transactions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FBlockLong);
        }

        /// <summary>
        /// Returns true if FBlockLong instances are equal
        /// </summary>
        /// <param name="input">Instance of FBlockLong to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FBlockLong input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Keymr == input.Keymr ||
                    (this.Keymr != null &&
                    this.Keymr.Equals(input.Keymr))
                ) && 
                (
                    this.Prev == input.Prev ||
                    (this.Prev != null &&
                    this.Prev.Equals(input.Prev))
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Dblock == input.Dblock ||
                    (this.Dblock != null &&
                    this.Dblock.Equals(input.Dblock))
                ) && 
                (
                    this.EcRate == input.EcRate ||
                    (this.EcRate != null &&
                    this.EcRate.Equals(input.EcRate))
                ) && 
                (
                    this.FctTotalInputs == input.FctTotalInputs ||
                    (this.FctTotalInputs != null &&
                    this.FctTotalInputs.Equals(input.FctTotalInputs))
                ) && 
                (
                    this.FctTotalOutputs == input.FctTotalOutputs ||
                    (this.FctTotalOutputs != null &&
                    this.FctTotalOutputs.Equals(input.FctTotalOutputs))
                ) && 
                (
                    this.EcTotalCreated == input.EcTotalCreated ||
                    (this.EcTotalCreated != null &&
                    this.EcTotalCreated.Equals(input.EcTotalCreated))
                ) && 
                (
                    this.Transactions == input.Transactions ||
                    (this.Transactions != null &&
                    this.Transactions.Equals(input.Transactions))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Keymr != null)
                    hashCode = hashCode * 59 + this.Keymr.GetHashCode();
                if (this.Prev != null)
                    hashCode = hashCode * 59 + this.Prev.GetHashCode();
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                if (this.Dblock != null)
                    hashCode = hashCode * 59 + this.Dblock.GetHashCode();
                if (this.EcRate != null)
                    hashCode = hashCode * 59 + this.EcRate.GetHashCode();
                if (this.FctTotalInputs != null)
                    hashCode = hashCode * 59 + this.FctTotalInputs.GetHashCode();
                if (this.FctTotalOutputs != null)
                    hashCode = hashCode * 59 + this.FctTotalOutputs.GetHashCode();
                if (this.EcTotalCreated != null)
                    hashCode = hashCode * 59 + this.EcTotalCreated.GetHashCode();
                if (this.Transactions != null)
                    hashCode = hashCode * 59 + this.Transactions.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
