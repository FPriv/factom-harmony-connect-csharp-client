/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// A single factoid transaction.
    /// </summary>
    [DataContract]
    public partial class Transaction :  IEquatable<Transaction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Transaction" /> class.
        /// </summary>
        /// <param name="txId">The transaction ID for this transaction..</param>
        /// <param name="createdAt">The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;.</param>
        /// <param name="fctTotalInputs">The number of factoids coming in from the sender..</param>
        /// <param name="fctTotalOutputs">The number of factoids going out to the receiver..</param>
        /// <param name="ecCreated">The number of entry credits that have been purchased in this transaction..</param>
        /// <param name="ecRate">The price of an entry credit at the time of this transaction..</param>
        /// <param name="fctFee">The fee paid to the processor of this transaction..</param>
        /// <param name="dblock">A link to the directory block that contains this transaction..</param>
        /// <param name="fblock">A link to the factoid block that contains this transaction..</param>
        /// <param name="inputs">All of the input transactions for this transaction..</param>
        /// <param name="outputs">All of the output transactions for this transaction..</param>
        public Transaction(string txId = default(string), string createdAt = default(string), string fctTotalInputs = default(string), string fctTotalOutputs = default(string), string ecCreated = default(string), string ecRate = default(string), string fctFee = default(string), string dblock = default(string), string fblock = default(string), string inputs = default(string), string outputs = default(string))
        {
            this.TxId = txId;
            this.CreatedAt = createdAt;
            this.FctTotalInputs = fctTotalInputs;
            this.FctTotalOutputs = fctTotalOutputs;
            this.EcCreated = ecCreated;
            this.EcRate = ecRate;
            this.FctFee = fctFee;
            this.Dblock = dblock;
            this.Fblock = fblock;
            this.Inputs = inputs;
            this.Outputs = outputs;
        }
        
        /// <summary>
        /// The transaction ID for this transaction.
        /// </summary>
        /// <value>The transaction ID for this transaction.</value>
        [DataMember(Name="tx_id", EmitDefaultValue=false)]
        public string TxId { get; set; }

        /// <summary>
        /// The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;
        /// </summary>
        /// <value>The timestamp for this transaction. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The number of factoids coming in from the sender.
        /// </summary>
        /// <value>The number of factoids coming in from the sender.</value>
        [DataMember(Name="fct_total_inputs", EmitDefaultValue=false)]
        public string FctTotalInputs { get; set; }

        /// <summary>
        /// The number of factoids going out to the receiver.
        /// </summary>
        /// <value>The number of factoids going out to the receiver.</value>
        [DataMember(Name="fct_total_outputs", EmitDefaultValue=false)]
        public string FctTotalOutputs { get; set; }

        /// <summary>
        /// The number of entry credits that have been purchased in this transaction.
        /// </summary>
        /// <value>The number of entry credits that have been purchased in this transaction.</value>
        [DataMember(Name="ec_created", EmitDefaultValue=false)]
        public string EcCreated { get; set; }

        /// <summary>
        /// The price of an entry credit at the time of this transaction.
        /// </summary>
        /// <value>The price of an entry credit at the time of this transaction.</value>
        [DataMember(Name="ec_rate", EmitDefaultValue=false)]
        public string EcRate { get; set; }

        /// <summary>
        /// The fee paid to the processor of this transaction.
        /// </summary>
        /// <value>The fee paid to the processor of this transaction.</value>
        [DataMember(Name="fct_fee", EmitDefaultValue=false)]
        public string FctFee { get; set; }

        /// <summary>
        /// A link to the directory block that contains this transaction.
        /// </summary>
        /// <value>A link to the directory block that contains this transaction.</value>
        [DataMember(Name="dblock", EmitDefaultValue=false)]
        public string Dblock { get; set; }

        /// <summary>
        /// A link to the factoid block that contains this transaction.
        /// </summary>
        /// <value>A link to the factoid block that contains this transaction.</value>
        [DataMember(Name="fblock", EmitDefaultValue=false)]
        public string Fblock { get; set; }

        /// <summary>
        /// All of the input transactions for this transaction.
        /// </summary>
        /// <value>All of the input transactions for this transaction.</value>
        [DataMember(Name="inputs", EmitDefaultValue=false)]
        public string Inputs { get; set; }

        /// <summary>
        /// All of the output transactions for this transaction.
        /// </summary>
        /// <value>All of the output transactions for this transaction.</value>
        [DataMember(Name="outputs", EmitDefaultValue=false)]
        public string Outputs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transaction {\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  FctTotalInputs: ").Append(FctTotalInputs).Append("\n");
            sb.Append("  FctTotalOutputs: ").Append(FctTotalOutputs).Append("\n");
            sb.Append("  EcCreated: ").Append(EcCreated).Append("\n");
            sb.Append("  EcRate: ").Append(EcRate).Append("\n");
            sb.Append("  FctFee: ").Append(FctFee).Append("\n");
            sb.Append("  Dblock: ").Append(Dblock).Append("\n");
            sb.Append("  Fblock: ").Append(Fblock).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Transaction);
        }

        /// <summary>
        /// Returns true if Transaction instances are equal
        /// </summary>
        /// <param name="input">Instance of Transaction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transaction input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TxId == input.TxId ||
                    (this.TxId != null &&
                    this.TxId.Equals(input.TxId))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.FctTotalInputs == input.FctTotalInputs ||
                    (this.FctTotalInputs != null &&
                    this.FctTotalInputs.Equals(input.FctTotalInputs))
                ) && 
                (
                    this.FctTotalOutputs == input.FctTotalOutputs ||
                    (this.FctTotalOutputs != null &&
                    this.FctTotalOutputs.Equals(input.FctTotalOutputs))
                ) && 
                (
                    this.EcCreated == input.EcCreated ||
                    (this.EcCreated != null &&
                    this.EcCreated.Equals(input.EcCreated))
                ) && 
                (
                    this.EcRate == input.EcRate ||
                    (this.EcRate != null &&
                    this.EcRate.Equals(input.EcRate))
                ) && 
                (
                    this.FctFee == input.FctFee ||
                    (this.FctFee != null &&
                    this.FctFee.Equals(input.FctFee))
                ) && 
                (
                    this.Dblock == input.Dblock ||
                    (this.Dblock != null &&
                    this.Dblock.Equals(input.Dblock))
                ) && 
                (
                    this.Fblock == input.Fblock ||
                    (this.Fblock != null &&
                    this.Fblock.Equals(input.Fblock))
                ) && 
                (
                    this.Inputs == input.Inputs ||
                    (this.Inputs != null &&
                    this.Inputs.Equals(input.Inputs))
                ) && 
                (
                    this.Outputs == input.Outputs ||
                    (this.Outputs != null &&
                    this.Outputs.Equals(input.Outputs))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TxId != null)
                    hashCode = hashCode * 59 + this.TxId.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.FctTotalInputs != null)
                    hashCode = hashCode * 59 + this.FctTotalInputs.GetHashCode();
                if (this.FctTotalOutputs != null)
                    hashCode = hashCode * 59 + this.FctTotalOutputs.GetHashCode();
                if (this.EcCreated != null)
                    hashCode = hashCode * 59 + this.EcCreated.GetHashCode();
                if (this.EcRate != null)
                    hashCode = hashCode * 59 + this.EcRate.GetHashCode();
                if (this.FctFee != null)
                    hashCode = hashCode * 59 + this.FctFee.GetHashCode();
                if (this.Dblock != null)
                    hashCode = hashCode * 59 + this.Dblock.GetHashCode();
                if (this.Fblock != null)
                    hashCode = hashCode * 59 + this.Fblock.GetHashCode();
                if (this.Inputs != null)
                    hashCode = hashCode * 59 + this.Inputs.GetHashCode();
                if (this.Outputs != null)
                    hashCode = hashCode * 59 + this.Outputs.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
