/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// MerkleNode
    /// </summary>
    [DataContract]
    public partial class MerkleNode :  IEquatable<MerkleNode>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MerkleNode" /> class.
        /// </summary>
        /// <param name="top">The top of this node of the Merkle tree..</param>
        /// <param name="right">The right branch of this node of the Merkle tree..</param>
        /// <param name="left">The left branch of this node of the Merkle tree..</param>
        public MerkleNode(string top = default(string), string right = default(string), string left = default(string))
        {
            this.Top = top;
            this.Right = right;
            this.Left = left;
        }
        
        /// <summary>
        /// The top of this node of the Merkle tree.
        /// </summary>
        /// <value>The top of this node of the Merkle tree.</value>
        [DataMember(Name="top", EmitDefaultValue=false)]
        public string Top { get; set; }

        /// <summary>
        /// The right branch of this node of the Merkle tree.
        /// </summary>
        /// <value>The right branch of this node of the Merkle tree.</value>
        [DataMember(Name="right", EmitDefaultValue=false)]
        public string Right { get; set; }

        /// <summary>
        /// The left branch of this node of the Merkle tree.
        /// </summary>
        /// <value>The left branch of this node of the Merkle tree.</value>
        [DataMember(Name="left", EmitDefaultValue=false)]
        public string Left { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MerkleNode {\n");
            sb.Append("  Top: ").Append(Top).Append("\n");
            sb.Append("  Right: ").Append(Right).Append("\n");
            sb.Append("  Left: ").Append(Left).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MerkleNode);
        }

        /// <summary>
        /// Returns true if MerkleNode instances are equal
        /// </summary>
        /// <param name="input">Instance of MerkleNode to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MerkleNode input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Top == input.Top ||
                    (this.Top != null &&
                    this.Top.Equals(input.Top))
                ) && 
                (
                    this.Right == input.Right ||
                    (this.Right != null &&
                    this.Right.Equals(input.Right))
                ) && 
                (
                    this.Left == input.Left ||
                    (this.Left != null &&
                    this.Left.Equals(input.Left))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Top != null)
                    hashCode = hashCode * 59 + this.Top.GetHashCode();
                if (this.Right != null)
                    hashCode = hashCode * 59 + this.Right.GetHashCode();
                if (this.Left != null)
                    hashCode = hashCode * 59 + this.Left.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
