/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// EBlockShort
    /// </summary>
    [DataContract]
    public partial class EBlockShort :  IEquatable<EBlockShort>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EBlockShort" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EBlockShort() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EBlockShort" /> class.
        /// </summary>
        /// <param name="keymr">The Key Merkle Root for this entry block. (required).</param>
        /// <param name="chain">chain (required).</param>
        /// <param name="dblock">dblock (required).</param>
        /// <param name="startedAt">The timestamp for when this block was built. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; (required).</param>
        /// <param name="href">An API link to retrieve all information about this entry block. (required).</param>
        /// <param name="entries">The number of entries contained within this entry block. (required).</param>
        public EBlockShort(string keymr = default(string), EBlockShortChain chain = default(EBlockShortChain), EBlockShortDblock dblock = default(EBlockShortDblock), Object startedAt = default(Object), string href = default(string), int? entries = default(int?))
        {
            // to ensure "keymr" is required (not null)
            if (keymr == null)
            {
                throw new InvalidDataException("keymr is a required property for EBlockShort and cannot be null");
            }
            else
            {
                this.Keymr = keymr;
            }
            // to ensure "chain" is required (not null)
            if (chain == null)
            {
                throw new InvalidDataException("chain is a required property for EBlockShort and cannot be null");
            }
            else
            {
                this.Chain = chain;
            }
            // to ensure "dblock" is required (not null)
            if (dblock == null)
            {
                throw new InvalidDataException("dblock is a required property for EBlockShort and cannot be null");
            }
            else
            {
                this.Dblock = dblock;
            }
            // to ensure "startedAt" is required (not null)
            if (startedAt == null)
            {
                throw new InvalidDataException("startedAt is a required property for EBlockShort and cannot be null");
            }
            else
            {
                this.StartedAt = startedAt;
            }
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new InvalidDataException("href is a required property for EBlockShort and cannot be null");
            }
            else
            {
                this.Href = href;
            }
            // to ensure "entries" is required (not null)
            if (entries == null)
            {
                throw new InvalidDataException("entries is a required property for EBlockShort and cannot be null");
            }
            else
            {
                this.Entries = entries;
            }
        }
        
        /// <summary>
        /// The Key Merkle Root for this entry block.
        /// </summary>
        /// <value>The Key Merkle Root for this entry block.</value>
        [DataMember(Name="keymr", EmitDefaultValue=false)]
        public string Keymr { get; set; }

        /// <summary>
        /// Gets or Sets Chain
        /// </summary>
        [DataMember(Name="chain", EmitDefaultValue=false)]
        public EBlockShortChain Chain { get; set; }

        /// <summary>
        /// Gets or Sets Dblock
        /// </summary>
        [DataMember(Name="dblock", EmitDefaultValue=false)]
        public EBlockShortDblock Dblock { get; set; }

        /// <summary>
        /// The timestamp for when this block was built. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;
        /// </summary>
        /// <value>The timestamp for when this block was built. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;</value>
        [DataMember(Name="started_at", EmitDefaultValue=false)]
        public Object StartedAt { get; set; }

        /// <summary>
        /// An API link to retrieve all information about this entry block.
        /// </summary>
        /// <value>An API link to retrieve all information about this entry block.</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// The number of entries contained within this entry block.
        /// </summary>
        /// <value>The number of entries contained within this entry block.</value>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public int? Entries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EBlockShort {\n");
            sb.Append("  Keymr: ").Append(Keymr).Append("\n");
            sb.Append("  Chain: ").Append(Chain).Append("\n");
            sb.Append("  Dblock: ").Append(Dblock).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EBlockShort);
        }

        /// <summary>
        /// Returns true if EBlockShort instances are equal
        /// </summary>
        /// <param name="input">Instance of EBlockShort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EBlockShort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Keymr == input.Keymr ||
                    (this.Keymr != null &&
                    this.Keymr.Equals(input.Keymr))
                ) && 
                (
                    this.Chain == input.Chain ||
                    (this.Chain != null &&
                    this.Chain.Equals(input.Chain))
                ) && 
                (
                    this.Dblock == input.Dblock ||
                    (this.Dblock != null &&
                    this.Dblock.Equals(input.Dblock))
                ) && 
                (
                    this.StartedAt == input.StartedAt ||
                    this.StartedAt != null &&
                    this.StartedAt.SequenceEqual(input.StartedAt)
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                ) && 
                (
                    this.Entries == input.Entries ||
                    (this.Entries != null &&
                    this.Entries.Equals(input.Entries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Keymr != null)
                    hashCode = hashCode * 59 + this.Keymr.GetHashCode();
                if (this.Chain != null)
                    hashCode = hashCode * 59 + this.Chain.GetHashCode();
                if (this.Dblock != null)
                    hashCode = hashCode * 59 + this.Dblock.GetHashCode();
                if (this.StartedAt != null)
                    hashCode = hashCode * 59 + this.StartedAt.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
