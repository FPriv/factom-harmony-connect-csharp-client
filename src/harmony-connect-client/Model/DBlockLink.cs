/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// A link to the directory block.
    /// </summary>
    [DataContract]
    public partial class DBlockLink :  IEquatable<DBlockLink>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DBlockLink" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DBlockLink() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DBlockLink" /> class.
        /// </summary>
        /// <param name="keymr">The Key Merkle Root for this directory block. (required).</param>
        /// <param name="height">The Factom block height of this block. (required).</param>
        /// <param name="href">An API link to retrieve all available information about this directory block. (required).</param>
        public DBlockLink(string keymr = default(string), int? height = default(int?), string href = default(string))
        {
            // to ensure "keymr" is required (not null)
            if (keymr == null)
            {
                throw new InvalidDataException("keymr is a required property for DBlockLink and cannot be null");
            }
            else
            {
                this.Keymr = keymr;
            }
            // to ensure "height" is required (not null)
            if (height == null)
            {
                throw new InvalidDataException("height is a required property for DBlockLink and cannot be null");
            }
            else
            {
                this.Height = height;
            }
            // to ensure "href" is required (not null)
            if (href == null)
            {
                throw new InvalidDataException("href is a required property for DBlockLink and cannot be null");
            }
            else
            {
                this.Href = href;
            }
        }
        
        /// <summary>
        /// The Key Merkle Root for this directory block.
        /// </summary>
        /// <value>The Key Merkle Root for this directory block.</value>
        [DataMember(Name="keymr", EmitDefaultValue=false)]
        public string Keymr { get; set; }

        /// <summary>
        /// The Factom block height of this block.
        /// </summary>
        /// <value>The Factom block height of this block.</value>
        [DataMember(Name="height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// An API link to retrieve all available information about this directory block.
        /// </summary>
        /// <value>An API link to retrieve all available information about this directory block.</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DBlockLink {\n");
            sb.Append("  Keymr: ").Append(Keymr).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DBlockLink);
        }

        /// <summary>
        /// Returns true if DBlockLink instances are equal
        /// </summary>
        /// <param name="input">Instance of DBlockLink to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DBlockLink input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Keymr == input.Keymr ||
                    (this.Keymr != null &&
                    this.Keymr.Equals(input.Keymr))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Href == input.Href ||
                    (this.Href != null &&
                    this.Href.Equals(input.Href))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Keymr != null)
                    hashCode = hashCode * 59 + this.Keymr.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Href != null)
                    hashCode = hashCode * 59 + this.Href.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
