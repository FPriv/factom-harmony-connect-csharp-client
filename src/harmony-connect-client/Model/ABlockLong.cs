/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// A single Admin block from the factom blockchain.
    /// </summary>
    [DataContract]
    public partial class ABlockLong :  IEquatable<ABlockLong>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ABlockLong" /> class.
        /// </summary>
        /// <param name="hash">The SHA256 Hash of this block..</param>
        /// <param name="backReferenceHash">The hash of the previous admin block..</param>
        /// <param name="prev">prev.</param>
        /// <param name="next">next.</param>
        /// <param name="dblock">dblock.</param>
        /// <param name="entries">The entries contained in this admin block..</param>
        public ABlockLong(string hash = default(string), string backReferenceHash = default(string), ABlockLongPrev prev = default(ABlockLongPrev), ABlockLongNext next = default(ABlockLongNext), ABlockLongDblock dblock = default(ABlockLongDblock), string entries = default(string))
        {
            this.Hash = hash;
            this.BackReferenceHash = backReferenceHash;
            this.Prev = prev;
            this.Next = next;
            this.Dblock = dblock;
            this.Entries = entries;
        }
        
        /// <summary>
        /// The SHA256 Hash of this block.
        /// </summary>
        /// <value>The SHA256 Hash of this block.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// The hash of the previous admin block.
        /// </summary>
        /// <value>The hash of the previous admin block.</value>
        [DataMember(Name="back_reference_hash", EmitDefaultValue=false)]
        public string BackReferenceHash { get; set; }

        /// <summary>
        /// Gets or Sets Prev
        /// </summary>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public ABlockLongPrev Prev { get; set; }

        /// <summary>
        /// Gets or Sets Next
        /// </summary>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public ABlockLongNext Next { get; set; }

        /// <summary>
        /// Gets or Sets Dblock
        /// </summary>
        [DataMember(Name="dblock", EmitDefaultValue=false)]
        public ABlockLongDblock Dblock { get; set; }

        /// <summary>
        /// The entries contained in this admin block.
        /// </summary>
        /// <value>The entries contained in this admin block.</value>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public string Entries { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ABlockLong {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  BackReferenceHash: ").Append(BackReferenceHash).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Dblock: ").Append(Dblock).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ABlockLong);
        }

        /// <summary>
        /// Returns true if ABlockLong instances are equal
        /// </summary>
        /// <param name="input">Instance of ABlockLong to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ABlockLong input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.BackReferenceHash == input.BackReferenceHash ||
                    (this.BackReferenceHash != null &&
                    this.BackReferenceHash.Equals(input.BackReferenceHash))
                ) && 
                (
                    this.Prev == input.Prev ||
                    (this.Prev != null &&
                    this.Prev.Equals(input.Prev))
                ) && 
                (
                    this.Next == input.Next ||
                    (this.Next != null &&
                    this.Next.Equals(input.Next))
                ) && 
                (
                    this.Dblock == input.Dblock ||
                    (this.Dblock != null &&
                    this.Dblock.Equals(input.Dblock))
                ) && 
                (
                    this.Entries == input.Entries ||
                    (this.Entries != null &&
                    this.Entries.Equals(input.Entries))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.BackReferenceHash != null)
                    hashCode = hashCode * 59 + this.BackReferenceHash.GetHashCode();
                if (this.Prev != null)
                    hashCode = hashCode * 59 + this.Prev.GetHashCode();
                if (this.Next != null)
                    hashCode = hashCode * 59 + this.Next.GetHashCode();
                if (this.Dblock != null)
                    hashCode = hashCode * 59 + this.Dblock.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
