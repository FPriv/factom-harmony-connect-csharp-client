/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// SingleAnchor
    /// </summary>
    [DataContract]
    public partial class SingleAnchor :  IEquatable<SingleAnchor>, IValidatableObject
    {
        /// <summary>
        /// Indicates the blockchain network that contains this anchor.
        /// </summary>
        /// <value>Indicates the blockchain network that contains this anchor.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetworkEnum
        {
            /// <summary>
            /// Enum Bitcoin for value: bitcoin
            /// </summary>
            [EnumMember(Value = "bitcoin")]
            Bitcoin = 1,

            /// <summary>
            /// Enum Ethereum for value: ethereum
            /// </summary>
            [EnumMember(Value = "ethereum")]
            Ethereum = 2,

            /// <summary>
            /// Enum Factom for value: factom
            /// </summary>
            [EnumMember(Value = "factom")]
            Factom = 3

        }

        /// <summary>
        /// Indicates the blockchain network that contains this anchor.
        /// </summary>
        /// <value>Indicates the blockchain network that contains this anchor.</value>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public NetworkEnum Network { get; set; }
        /// <summary>
        /// The confirmation status of the anchor. Either pending or confirmed.
        /// </summary>
        /// <value>The confirmation status of the anchor. Either pending or confirmed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2

        }

        /// <summary>
        /// The confirmation status of the anchor. Either pending or confirmed.
        /// </summary>
        /// <value>The confirmation status of the anchor. Either pending or confirmed.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleAnchor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SingleAnchor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SingleAnchor" /> class.
        /// </summary>
        /// <param name="network">Indicates the blockchain network that contains this anchor. (required).</param>
        /// <param name="status">The confirmation status of the anchor. Either pending or confirmed. (required).</param>
        /// <param name="txId">Only returned for confirmed bitcoin or ethereum anchors. The bitcoin or ethereum transaction ID for the transaction that includes the anchor message..</param>
        /// <param name="blockHash">Only returned for confirmed bitcoin or ethereum anchors. The hash of the bitcoin or ethereum block that contains the anchor message..</param>
        /// <param name="createdAt">Only returned for confirmed factom anchors. The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage..</param>
        /// <param name="entrySerialized">Only returned for confirmed factom anchors. The raw data that makes up the entry..</param>
        /// <param name="entryHash">Only returned for confirmed factom anchors. The unique identitfier of the entry..</param>
        /// <param name="dblock">dblock.</param>
        /// <param name="merkleBranch">Only returned for confirmed factom or ethereum anchors. The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes..</param>
        /// <param name="windowStartHeight">Only returned for confirmed ethereum anchors. The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks..</param>
        /// <param name="windowMr">Only returned for confirmed ethereum anchors. Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that&#39;s included in this anchor..</param>
        /// <param name="contractAddress">Only returned for confirmed ethereum anchors. The address of the contract that initiated the anchor transaction..</param>
        /// <param name="txIndex">Only returned for confirmed ethereum anchors. The index of the transaction within the block..</param>
        public SingleAnchor(NetworkEnum network = default(NetworkEnum), StatusEnum status = default(StatusEnum), string txId = default(string), string blockHash = default(string), string createdAt = default(string), string entrySerialized = default(string), string entryHash = default(string), DBlockLink dblock = default(DBlockLink), List<MerkleNode> merkleBranch = default(List<MerkleNode>), int? windowStartHeight = default(int?), string windowMr = default(string), string contractAddress = default(string), int? txIndex = default(int?))
        {
            // to ensure "network" is required (not null)
            if (network == null)
            {
                throw new InvalidDataException("network is a required property for SingleAnchor and cannot be null");
            }
            else
            {
                this.Network = network;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for SingleAnchor and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.TxId = txId;
            this.BlockHash = blockHash;
            this.CreatedAt = createdAt;
            this.EntrySerialized = entrySerialized;
            this.EntryHash = entryHash;
            this.Dblock = dblock;
            this.MerkleBranch = merkleBranch;
            this.WindowStartHeight = windowStartHeight;
            this.WindowMr = windowMr;
            this.ContractAddress = contractAddress;
            this.TxIndex = txIndex;
        }
        


        /// <summary>
        /// Only returned for confirmed bitcoin or ethereum anchors. The bitcoin or ethereum transaction ID for the transaction that includes the anchor message.
        /// </summary>
        /// <value>Only returned for confirmed bitcoin or ethereum anchors. The bitcoin or ethereum transaction ID for the transaction that includes the anchor message.</value>
        [DataMember(Name="tx_id", EmitDefaultValue=false)]
        public string TxId { get; set; }

        /// <summary>
        /// Only returned for confirmed bitcoin or ethereum anchors. The hash of the bitcoin or ethereum block that contains the anchor message.
        /// </summary>
        /// <value>Only returned for confirmed bitcoin or ethereum anchors. The hash of the bitcoin or ethereum block that contains the anchor message.</value>
        [DataMember(Name="block_hash", EmitDefaultValue=false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Only returned for confirmed factom anchors. The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage.
        /// </summary>
        /// <value>Only returned for confirmed factom anchors. The time at which this entry was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Only returned for confirmed factom anchors. The raw data that makes up the entry.
        /// </summary>
        /// <value>Only returned for confirmed factom anchors. The raw data that makes up the entry.</value>
        [DataMember(Name="entry_serialized", EmitDefaultValue=false)]
        public string EntrySerialized { get; set; }

        /// <summary>
        /// Only returned for confirmed factom anchors. The unique identitfier of the entry.
        /// </summary>
        /// <value>Only returned for confirmed factom anchors. The unique identitfier of the entry.</value>
        [DataMember(Name="entry_hash", EmitDefaultValue=false)]
        public string EntryHash { get; set; }

        /// <summary>
        /// Gets or Sets Dblock
        /// </summary>
        [DataMember(Name="dblock", EmitDefaultValue=false)]
        public DBlockLink Dblock { get; set; }

        /// <summary>
        /// Only returned for confirmed factom or ethereum anchors. The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes.
        /// </summary>
        /// <value>Only returned for confirmed factom or ethereum anchors. The branch of the merkle tree that represents this anchor. Presented as an array of Merkle nodes.</value>
        [DataMember(Name="merkle_branch", EmitDefaultValue=false)]
        public List<MerkleNode> MerkleBranch { get; set; }

        /// <summary>
        /// Only returned for confirmed ethereum anchors. The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks.
        /// </summary>
        /// <value>Only returned for confirmed ethereum anchors. The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks.</value>
        [DataMember(Name="window_start_height", EmitDefaultValue=false)]
        public int? WindowStartHeight { get; set; }

        /// <summary>
        /// Only returned for confirmed ethereum anchors. Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that&#39;s included in this anchor.
        /// </summary>
        /// <value>Only returned for confirmed ethereum anchors. Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that&#39;s included in this anchor.</value>
        [DataMember(Name="window_mr", EmitDefaultValue=false)]
        public string WindowMr { get; set; }

        /// <summary>
        /// Only returned for confirmed ethereum anchors. The address of the contract that initiated the anchor transaction.
        /// </summary>
        /// <value>Only returned for confirmed ethereum anchors. The address of the contract that initiated the anchor transaction.</value>
        [DataMember(Name="contract_address", EmitDefaultValue=false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// Only returned for confirmed ethereum anchors. The index of the transaction within the block.
        /// </summary>
        /// <value>Only returned for confirmed ethereum anchors. The index of the transaction within the block.</value>
        [DataMember(Name="tx_index", EmitDefaultValue=false)]
        public int? TxIndex { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SingleAnchor {\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  EntrySerialized: ").Append(EntrySerialized).Append("\n");
            sb.Append("  EntryHash: ").Append(EntryHash).Append("\n");
            sb.Append("  Dblock: ").Append(Dblock).Append("\n");
            sb.Append("  MerkleBranch: ").Append(MerkleBranch).Append("\n");
            sb.Append("  WindowStartHeight: ").Append(WindowStartHeight).Append("\n");
            sb.Append("  WindowMr: ").Append(WindowMr).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  TxIndex: ").Append(TxIndex).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SingleAnchor);
        }

        /// <summary>
        /// Returns true if SingleAnchor instances are equal
        /// </summary>
        /// <param name="input">Instance of SingleAnchor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SingleAnchor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.TxId == input.TxId ||
                    (this.TxId != null &&
                    this.TxId.Equals(input.TxId))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.EntrySerialized == input.EntrySerialized ||
                    (this.EntrySerialized != null &&
                    this.EntrySerialized.Equals(input.EntrySerialized))
                ) && 
                (
                    this.EntryHash == input.EntryHash ||
                    (this.EntryHash != null &&
                    this.EntryHash.Equals(input.EntryHash))
                ) && 
                (
                    this.Dblock == input.Dblock ||
                    (this.Dblock != null &&
                    this.Dblock.Equals(input.Dblock))
                ) && 
                (
                    this.MerkleBranch == input.MerkleBranch ||
                    this.MerkleBranch != null &&
                    this.MerkleBranch.SequenceEqual(input.MerkleBranch)
                ) && 
                (
                    this.WindowStartHeight == input.WindowStartHeight ||
                    (this.WindowStartHeight != null &&
                    this.WindowStartHeight.Equals(input.WindowStartHeight))
                ) && 
                (
                    this.WindowMr == input.WindowMr ||
                    (this.WindowMr != null &&
                    this.WindowMr.Equals(input.WindowMr))
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.TxIndex == input.TxIndex ||
                    (this.TxIndex != null &&
                    this.TxIndex.Equals(input.TxIndex))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Network != null)
                    hashCode = hashCode * 59 + this.Network.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.TxId != null)
                    hashCode = hashCode * 59 + this.TxId.GetHashCode();
                if (this.BlockHash != null)
                    hashCode = hashCode * 59 + this.BlockHash.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.EntrySerialized != null)
                    hashCode = hashCode * 59 + this.EntrySerialized.GetHashCode();
                if (this.EntryHash != null)
                    hashCode = hashCode * 59 + this.EntryHash.GetHashCode();
                if (this.Dblock != null)
                    hashCode = hashCode * 59 + this.Dblock.GetHashCode();
                if (this.MerkleBranch != null)
                    hashCode = hashCode * 59 + this.MerkleBranch.GetHashCode();
                if (this.WindowStartHeight != null)
                    hashCode = hashCode * 59 + this.WindowStartHeight.GetHashCode();
                if (this.WindowMr != null)
                    hashCode = hashCode * 59 + this.WindowMr.GetHashCode();
                if (this.ContractAddress != null)
                    hashCode = hashCode * 59 + this.ContractAddress.GetHashCode();
                if (this.TxIndex != null)
                    hashCode = hashCode * 59 + this.TxIndex.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
