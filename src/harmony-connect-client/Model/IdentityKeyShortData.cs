/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// IdentityKeyShortData
    /// </summary>
    [DataContract]
    public partial class IdentityKeyShortData :  IEquatable<IdentityKeyShortData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityKeyShortData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityKeyShortData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityKeyShortData" /> class.
        /// </summary>
        /// <param name="key">The public key. (required).</param>
        /// <param name="activatedHeight">The height at which this key became valid. &#x60;null&#x60; if this is the first key..</param>
        /// <param name="retiredHeight">The expiration height of this key. &#x60;null&#x60; if this is the current key..</param>
        public IdentityKeyShortData(string key = default(string), int? activatedHeight = default(int?), int? retiredHeight = default(int?))
        {
            // to ensure "key" is required (not null)
            if (key == null)
            {
                throw new InvalidDataException("key is a required property for IdentityKeyShortData and cannot be null");
            }
            else
            {
                this.Key = key;
            }
            this.ActivatedHeight = activatedHeight;
            this.RetiredHeight = retiredHeight;
        }
        
        /// <summary>
        /// The public key.
        /// </summary>
        /// <value>The public key.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The height at which this key became valid. &#x60;null&#x60; if this is the first key.
        /// </summary>
        /// <value>The height at which this key became valid. &#x60;null&#x60; if this is the first key.</value>
        [DataMember(Name="activated_height", EmitDefaultValue=false)]
        public int? ActivatedHeight { get; set; }

        /// <summary>
        /// The expiration height of this key. &#x60;null&#x60; if this is the current key.
        /// </summary>
        /// <value>The expiration height of this key. &#x60;null&#x60; if this is the current key.</value>
        [DataMember(Name="retired_height", EmitDefaultValue=false)]
        public int? RetiredHeight { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityKeyShortData {\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  ActivatedHeight: ").Append(ActivatedHeight).Append("\n");
            sb.Append("  RetiredHeight: ").Append(RetiredHeight).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityKeyShortData);
        }

        /// <summary>
        /// Returns true if IdentityKeyShortData instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityKeyShortData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityKeyShortData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Key == input.Key ||
                    (this.Key != null &&
                    this.Key.Equals(input.Key))
                ) && 
                (
                    this.ActivatedHeight == input.ActivatedHeight ||
                    (this.ActivatedHeight != null &&
                    this.ActivatedHeight.Equals(input.ActivatedHeight))
                ) && 
                (
                    this.RetiredHeight == input.RetiredHeight ||
                    (this.RetiredHeight != null &&
                    this.RetiredHeight.Equals(input.RetiredHeight))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Key != null)
                    hashCode = hashCode * 59 + this.Key.GetHashCode();
                if (this.ActivatedHeight != null)
                    hashCode = hashCode * 59 + this.ActivatedHeight.GetHashCode();
                if (this.RetiredHeight != null)
                    hashCode = hashCode * 59 + this.RetiredHeight.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
