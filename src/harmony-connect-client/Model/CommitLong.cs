/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// CommitLong
    /// </summary>
    [DataContract]
    public partial class CommitLong :  IEquatable<CommitLong>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommitLong" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CommitLong() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="CommitLong" /> class.
        /// </summary>
        /// <param name="hash">The SHA256 Hash of this commit. (required).</param>
        /// <param name="txId">The entry credit transaction ID that resulted in this commit. (required).</param>
        /// <param name="version">The type version of this transaction. (required).</param>
        /// <param name="createdAt">The timestamp for when this commit was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60; (required).</param>
        /// <param name="chainId">The ID of the chain that was altered by this commit. (required).</param>
        /// <param name="weld">The commit weld for this commit. This is the double hash (SHA256d) of the Entry Hash concatenated with the ChainID. (required).</param>
        /// <param name="entryHash">The unique identifier of the entry that was created by this commit. (required).</param>
        /// <param name="entryCredits">The number of entry credits spent on this commit. (required).</param>
        /// <param name="address">The entry credit address that initiated this transaction. (required).</param>
        /// <param name="signature">The signature that authorized this commit. (required).</param>
        /// <param name="ecBlock">ecBlock.</param>
        public CommitLong(string hash = default(string), string txId = default(string), int? version = default(int?), string createdAt = default(string), string chainId = default(string), string weld = default(string), string entryHash = default(string), int? entryCredits = default(int?), string address = default(string), string signature = default(string), ECBlockShort ecBlock = default(ECBlockShort))
        {
            // to ensure "hash" is required (not null)
            if (hash == null)
            {
                throw new InvalidDataException("hash is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.Hash = hash;
            }
            // to ensure "txId" is required (not null)
            if (txId == null)
            {
                throw new InvalidDataException("txId is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.TxId = txId;
            }
            // to ensure "version" is required (not null)
            if (version == null)
            {
                throw new InvalidDataException("version is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.Version = version;
            }
            // to ensure "createdAt" is required (not null)
            if (createdAt == null)
            {
                throw new InvalidDataException("createdAt is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.CreatedAt = createdAt;
            }
            // to ensure "chainId" is required (not null)
            if (chainId == null)
            {
                throw new InvalidDataException("chainId is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.ChainId = chainId;
            }
            // to ensure "weld" is required (not null)
            if (weld == null)
            {
                throw new InvalidDataException("weld is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.Weld = weld;
            }
            // to ensure "entryHash" is required (not null)
            if (entryHash == null)
            {
                throw new InvalidDataException("entryHash is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.EntryHash = entryHash;
            }
            // to ensure "entryCredits" is required (not null)
            if (entryCredits == null)
            {
                throw new InvalidDataException("entryCredits is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.EntryCredits = entryCredits;
            }
            // to ensure "address" is required (not null)
            if (address == null)
            {
                throw new InvalidDataException("address is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.Address = address;
            }
            // to ensure "signature" is required (not null)
            if (signature == null)
            {
                throw new InvalidDataException("signature is a required property for CommitLong and cannot be null");
            }
            else
            {
                this.Signature = signature;
            }
            this.EcBlock = ecBlock;
        }
        
        /// <summary>
        /// The SHA256 Hash of this commit.
        /// </summary>
        /// <value>The SHA256 Hash of this commit.</value>
        [DataMember(Name="hash", EmitDefaultValue=false)]
        public string Hash { get; set; }

        /// <summary>
        /// The entry credit transaction ID that resulted in this commit.
        /// </summary>
        /// <value>The entry credit transaction ID that resulted in this commit.</value>
        [DataMember(Name="tx_id", EmitDefaultValue=false)]
        public string TxId { get; set; }

        /// <summary>
        /// The type version of this transaction.
        /// </summary>
        /// <value>The type version of this transaction.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public int? Version { get; set; }

        /// <summary>
        /// The timestamp for when this commit was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;
        /// </summary>
        /// <value>The timestamp for when this commit was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ssZ&#x60;</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// The ID of the chain that was altered by this commit.
        /// </summary>
        /// <value>The ID of the chain that was altered by this commit.</value>
        [DataMember(Name="chain_id", EmitDefaultValue=false)]
        public string ChainId { get; set; }

        /// <summary>
        /// The commit weld for this commit. This is the double hash (SHA256d) of the Entry Hash concatenated with the ChainID.
        /// </summary>
        /// <value>The commit weld for this commit. This is the double hash (SHA256d) of the Entry Hash concatenated with the ChainID.</value>
        [DataMember(Name="weld", EmitDefaultValue=false)]
        public string Weld { get; set; }

        /// <summary>
        /// The unique identifier of the entry that was created by this commit.
        /// </summary>
        /// <value>The unique identifier of the entry that was created by this commit.</value>
        [DataMember(Name="entry_hash", EmitDefaultValue=false)]
        public string EntryHash { get; set; }

        /// <summary>
        /// The number of entry credits spent on this commit.
        /// </summary>
        /// <value>The number of entry credits spent on this commit.</value>
        [DataMember(Name="entry_credits", EmitDefaultValue=false)]
        public int? EntryCredits { get; set; }

        /// <summary>
        /// The entry credit address that initiated this transaction.
        /// </summary>
        /// <value>The entry credit address that initiated this transaction.</value>
        [DataMember(Name="address", EmitDefaultValue=false)]
        public string Address { get; set; }

        /// <summary>
        /// The signature that authorized this commit.
        /// </summary>
        /// <value>The signature that authorized this commit.</value>
        [DataMember(Name="signature", EmitDefaultValue=false)]
        public string Signature { get; set; }

        /// <summary>
        /// Gets or Sets EcBlock
        /// </summary>
        [DataMember(Name="ec_block", EmitDefaultValue=false)]
        public ECBlockShort EcBlock { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommitLong {\n");
            sb.Append("  Hash: ").Append(Hash).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Weld: ").Append(Weld).Append("\n");
            sb.Append("  EntryHash: ").Append(EntryHash).Append("\n");
            sb.Append("  EntryCredits: ").Append(EntryCredits).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Signature: ").Append(Signature).Append("\n");
            sb.Append("  EcBlock: ").Append(EcBlock).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommitLong);
        }

        /// <summary>
        /// Returns true if CommitLong instances are equal
        /// </summary>
        /// <param name="input">Instance of CommitLong to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommitLong input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Hash == input.Hash ||
                    (this.Hash != null &&
                    this.Hash.Equals(input.Hash))
                ) && 
                (
                    this.TxId == input.TxId ||
                    (this.TxId != null &&
                    this.TxId.Equals(input.TxId))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                ) && 
                (
                    this.ChainId == input.ChainId ||
                    (this.ChainId != null &&
                    this.ChainId.Equals(input.ChainId))
                ) && 
                (
                    this.Weld == input.Weld ||
                    (this.Weld != null &&
                    this.Weld.Equals(input.Weld))
                ) && 
                (
                    this.EntryHash == input.EntryHash ||
                    (this.EntryHash != null &&
                    this.EntryHash.Equals(input.EntryHash))
                ) && 
                (
                    this.EntryCredits == input.EntryCredits ||
                    (this.EntryCredits != null &&
                    this.EntryCredits.Equals(input.EntryCredits))
                ) && 
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) && 
                (
                    this.Signature == input.Signature ||
                    (this.Signature != null &&
                    this.Signature.Equals(input.Signature))
                ) && 
                (
                    this.EcBlock == input.EcBlock ||
                    (this.EcBlock != null &&
                    this.EcBlock.Equals(input.EcBlock))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Hash != null)
                    hashCode = hashCode * 59 + this.Hash.GetHashCode();
                if (this.TxId != null)
                    hashCode = hashCode * 59 + this.TxId.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                if (this.ChainId != null)
                    hashCode = hashCode * 59 + this.ChainId.GetHashCode();
                if (this.Weld != null)
                    hashCode = hashCode * 59 + this.Weld.GetHashCode();
                if (this.EntryHash != null)
                    hashCode = hashCode * 59 + this.EntryHash.GetHashCode();
                if (this.EntryCredits != null)
                    hashCode = hashCode * 59 + this.EntryCredits.GetHashCode();
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Signature != null)
                    hashCode = hashCode * 59 + this.Signature.GetHashCode();
                if (this.EcBlock != null)
                    hashCode = hashCode * 59 + this.EcBlock.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
