/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// ChainData
    /// </summary>
    [DataContract]
    public partial class ChainData :  IEquatable<ChainData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChainData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChainData" /> class.
        /// </summary>
        /// <param name="chainId">This is the unique identifier created for each chain. (required).</param>
        /// <param name="content">This is the data that was stored in the first entry of this chain. (required).</param>
        /// <param name="externalIds">Tags that have been used to identify this entry. (required).</param>
        /// <param name="stage">The immutability stage that this chain has reached. (required).</param>
        /// <param name="entries">entries (required).</param>
        /// <param name="eblock">eblock.</param>
        /// <param name="dblock">dblock.</param>
        /// <param name="createdAt">The time at which this chain was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage..</param>
        public ChainData(string chainId = default(string), string content = default(string), List<string> externalIds = default(List<string>), string stage = default(string), ChainDataEntries entries = default(ChainDataEntries), ChainDataEblock eblock = default(ChainDataEblock), ChainDataDblock dblock = default(ChainDataDblock), string createdAt = default(string))
        {
            // to ensure "chainId" is required (not null)
            if (chainId == null)
            {
                throw new InvalidDataException("chainId is a required property for ChainData and cannot be null");
            }
            else
            {
                this.ChainId = chainId;
            }
            // to ensure "content" is required (not null)
            if (content == null)
            {
                throw new InvalidDataException("content is a required property for ChainData and cannot be null");
            }
            else
            {
                this.Content = content;
            }
            // to ensure "externalIds" is required (not null)
            if (externalIds == null)
            {
                throw new InvalidDataException("externalIds is a required property for ChainData and cannot be null");
            }
            else
            {
                this.ExternalIds = externalIds;
            }
            // to ensure "stage" is required (not null)
            if (stage == null)
            {
                throw new InvalidDataException("stage is a required property for ChainData and cannot be null");
            }
            else
            {
                this.Stage = stage;
            }
            // to ensure "entries" is required (not null)
            if (entries == null)
            {
                throw new InvalidDataException("entries is a required property for ChainData and cannot be null");
            }
            else
            {
                this.Entries = entries;
            }
            this.Eblock = eblock;
            this.Dblock = dblock;
            this.CreatedAt = createdAt;
        }
        
        /// <summary>
        /// This is the unique identifier created for each chain.
        /// </summary>
        /// <value>This is the unique identifier created for each chain.</value>
        [DataMember(Name="chain_id", EmitDefaultValue=false)]
        public string ChainId { get; set; }

        /// <summary>
        /// This is the data that was stored in the first entry of this chain.
        /// </summary>
        /// <value>This is the data that was stored in the first entry of this chain.</value>
        [DataMember(Name="content", EmitDefaultValue=false)]
        public string Content { get; set; }

        /// <summary>
        /// Tags that have been used to identify this entry.
        /// </summary>
        /// <value>Tags that have been used to identify this entry.</value>
        [DataMember(Name="external_ids", EmitDefaultValue=false)]
        public List<string> ExternalIds { get; set; }

        /// <summary>
        /// The immutability stage that this chain has reached.
        /// </summary>
        /// <value>The immutability stage that this chain has reached.</value>
        [DataMember(Name="stage", EmitDefaultValue=false)]
        public string Stage { get; set; }

        /// <summary>
        /// Gets or Sets Entries
        /// </summary>
        [DataMember(Name="entries", EmitDefaultValue=false)]
        public ChainDataEntries Entries { get; set; }

        /// <summary>
        /// Gets or Sets Eblock
        /// </summary>
        [DataMember(Name="eblock", EmitDefaultValue=false)]
        public ChainDataEblock Eblock { get; set; }

        /// <summary>
        /// Gets or Sets Dblock
        /// </summary>
        [DataMember(Name="dblock", EmitDefaultValue=false)]
        public ChainDataDblock Dblock { get; set; }

        /// <summary>
        /// The time at which this chain was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage.
        /// </summary>
        /// <value>The time at which this chain was created. Sent in [ISO 8601 Format](https://en.wikipedia.org/wiki/ISO_8601). For example: &#x60;YYYY-MM-DDThh:mm:ss.ssssssZ&#x60; This will be null if the chain is not at least at the &#x60;factom&#x60; immutability stage.</value>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChainData {\n");
            sb.Append("  ChainId: ").Append(ChainId).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("  ExternalIds: ").Append(ExternalIds).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("  Entries: ").Append(Entries).Append("\n");
            sb.Append("  Eblock: ").Append(Eblock).Append("\n");
            sb.Append("  Dblock: ").Append(Dblock).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ChainData);
        }

        /// <summary>
        /// Returns true if ChainData instances are equal
        /// </summary>
        /// <param name="input">Instance of ChainData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChainData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChainId == input.ChainId ||
                    (this.ChainId != null &&
                    this.ChainId.Equals(input.ChainId))
                ) && 
                (
                    this.Content == input.Content ||
                    (this.Content != null &&
                    this.Content.Equals(input.Content))
                ) && 
                (
                    this.ExternalIds == input.ExternalIds ||
                    this.ExternalIds != null &&
                    this.ExternalIds.SequenceEqual(input.ExternalIds)
                ) && 
                (
                    this.Stage == input.Stage ||
                    (this.Stage != null &&
                    this.Stage.Equals(input.Stage))
                ) && 
                (
                    this.Entries == input.Entries ||
                    (this.Entries != null &&
                    this.Entries.Equals(input.Entries))
                ) && 
                (
                    this.Eblock == input.Eblock ||
                    (this.Eblock != null &&
                    this.Eblock.Equals(input.Eblock))
                ) && 
                (
                    this.Dblock == input.Dblock ||
                    (this.Dblock != null &&
                    this.Dblock.Equals(input.Dblock))
                ) && 
                (
                    this.CreatedAt == input.CreatedAt ||
                    (this.CreatedAt != null &&
                    this.CreatedAt.Equals(input.CreatedAt))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChainId != null)
                    hashCode = hashCode * 59 + this.ChainId.GetHashCode();
                if (this.Content != null)
                    hashCode = hashCode * 59 + this.Content.GetHashCode();
                if (this.ExternalIds != null)
                    hashCode = hashCode * 59 + this.ExternalIds.GetHashCode();
                if (this.Stage != null)
                    hashCode = hashCode * 59 + this.Stage.GetHashCode();
                if (this.Entries != null)
                    hashCode = hashCode * 59 + this.Entries.GetHashCode();
                if (this.Eblock != null)
                    hashCode = hashCode * 59 + this.Eblock.GetHashCode();
                if (this.Dblock != null)
                    hashCode = hashCode * 59 + this.Dblock.GetHashCode();
                if (this.CreatedAt != null)
                    hashCode = hashCode * 59 + this.CreatedAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
