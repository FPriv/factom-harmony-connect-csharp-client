/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// IdentityCreate
    /// </summary>
    [DataContract]
    public partial class IdentityCreate :  IEquatable<IdentityCreate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityCreate" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected IdentityCreate() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentityCreate" /> class.
        /// </summary>
        /// <param name="names">A unique array of strings that together constitute the Identity&#39;s name. Each string should be in Base64 format.   *Note: It is best to avoid adding personally identifiable information to the blockchain.* (required).</param>
        /// <param name="keys">A list of public keys that will be used to verify this Indenty’s signatures. You may initiate an identity with as many keys as you like. The array of keys should be sent in order of priority with 0 being the master key. The keys should be sent as Base58 strings in IdPub format. (required).</param>
        /// <param name="callbackUrl">The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate..</param>
        /// <param name="callbackStages">The stages that you would like to trigger a callback from Connect. This list can include any or all of the three stages: &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If callbacks are activated and this field is not sent, it will default to &#x60;factom&#x60; and &#x60;anchored&#x60;.</param>
        public IdentityCreate(List<string> names = default(List<string>), List<string> keys = default(List<string>), string callbackUrl = default(string), List<string> callbackStages = default(List<string>))
        {
            // to ensure "names" is required (not null)
            if (names == null)
            {
                throw new InvalidDataException("names is a required property for IdentityCreate and cannot be null");
            }
            else
            {
                this.Names = names;
            }
            // to ensure "keys" is required (not null)
            if (keys == null)
            {
                throw new InvalidDataException("keys is a required property for IdentityCreate and cannot be null");
            }
            else
            {
                this.Keys = keys;
            }
            this.CallbackUrl = callbackUrl;
            this.CallbackStages = callbackStages;
        }
        
        /// <summary>
        /// A unique array of strings that together constitute the Identity&#39;s name. Each string should be in Base64 format.   *Note: It is best to avoid adding personally identifiable information to the blockchain.*
        /// </summary>
        /// <value>A unique array of strings that together constitute the Identity&#39;s name. Each string should be in Base64 format.   *Note: It is best to avoid adding personally identifiable information to the blockchain.*</value>
        [DataMember(Name="names", EmitDefaultValue=false)]
        public List<string> Names { get; set; }

        /// <summary>
        /// A list of public keys that will be used to verify this Indenty’s signatures. You may initiate an identity with as many keys as you like. The array of keys should be sent in order of priority with 0 being the master key. The keys should be sent as Base58 strings in IdPub format.
        /// </summary>
        /// <value>A list of public keys that will be used to verify this Indenty’s signatures. You may initiate an identity with as many keys as you like. The array of keys should be sent in order of priority with 0 being the master key. The keys should be sent as Base58 strings in IdPub format.</value>
        [DataMember(Name="keys", EmitDefaultValue=false)]
        public List<string> Keys { get; set; }

        /// <summary>
        /// The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate.
        /// </summary>
        /// <value>The URL where you would like to receive the callback from Connect. If this is not specified, callbacks will not activate.</value>
        [DataMember(Name="callback_url", EmitDefaultValue=false)]
        public string CallbackUrl { get; set; }

        /// <summary>
        /// The stages that you would like to trigger a callback from Connect. This list can include any or all of the three stages: &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If callbacks are activated and this field is not sent, it will default to &#x60;factom&#x60; and &#x60;anchored&#x60;
        /// </summary>
        /// <value>The stages that you would like to trigger a callback from Connect. This list can include any or all of the three stages: &#x60;replicated&#x60;, &#x60;factom&#x60;, and &#x60;anchored&#x60;. If callbacks are activated and this field is not sent, it will default to &#x60;factom&#x60; and &#x60;anchored&#x60;</value>
        [DataMember(Name="callback_stages", EmitDefaultValue=false)]
        public List<string> CallbackStages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IdentityCreate {\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Keys: ").Append(Keys).Append("\n");
            sb.Append("  CallbackUrl: ").Append(CallbackUrl).Append("\n");
            sb.Append("  CallbackStages: ").Append(CallbackStages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IdentityCreate);
        }

        /// <summary>
        /// Returns true if IdentityCreate instances are equal
        /// </summary>
        /// <param name="input">Instance of IdentityCreate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IdentityCreate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Names == input.Names ||
                    this.Names != null &&
                    this.Names.SequenceEqual(input.Names)
                ) && 
                (
                    this.Keys == input.Keys ||
                    this.Keys != null &&
                    this.Keys.SequenceEqual(input.Keys)
                ) && 
                (
                    this.CallbackUrl == input.CallbackUrl ||
                    (this.CallbackUrl != null &&
                    this.CallbackUrl.Equals(input.CallbackUrl))
                ) && 
                (
                    this.CallbackStages == input.CallbackStages ||
                    this.CallbackStages != null &&
                    this.CallbackStages.SequenceEqual(input.CallbackStages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Names != null)
                    hashCode = hashCode * 59 + this.Names.GetHashCode();
                if (this.Keys != null)
                    hashCode = hashCode * 59 + this.Keys.GetHashCode();
                if (this.CallbackUrl != null)
                    hashCode = hashCode * 59 + this.CallbackUrl.GetHashCode();
                if (this.CallbackStages != null)
                    hashCode = hashCode * 59 + this.CallbackStages.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
