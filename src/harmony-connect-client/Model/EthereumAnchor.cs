/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = harmony-connect-client.Client.OpenAPIDateConverter;

namespace harmony-connect-client.Model
{
    /// <summary>
    /// EthereumAnchor
    /// </summary>
    [DataContract]
    public partial class EthereumAnchor :  IEquatable<EthereumAnchor>, IValidatableObject
    {
        /// <summary>
        /// Indicates the blockchain network that contains this anchor.
        /// </summary>
        /// <value>Indicates the blockchain network that contains this anchor.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum NetworkEnum
        {
            /// <summary>
            /// Enum Bitcoin for value: bitcoin
            /// </summary>
            [EnumMember(Value = "bitcoin")]
            Bitcoin = 1,

            /// <summary>
            /// Enum Ethereum for value: ethereum
            /// </summary>
            [EnumMember(Value = "ethereum")]
            Ethereum = 2,

            /// <summary>
            /// Enum Factom for value: factom
            /// </summary>
            [EnumMember(Value = "factom")]
            Factom = 3

        }

        /// <summary>
        /// Indicates the blockchain network that contains this anchor.
        /// </summary>
        /// <value>Indicates the blockchain network that contains this anchor.</value>
        [DataMember(Name="network", EmitDefaultValue=false)]
        public NetworkEnum Network { get; set; }
        /// <summary>
        /// The confirmation status of the anchor. Either pending or confirmed.
        /// </summary>
        /// <value>The confirmation status of the anchor. Either pending or confirmed.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 1,

            /// <summary>
            /// Enum Confirmed for value: confirmed
            /// </summary>
            [EnumMember(Value = "confirmed")]
            Confirmed = 2

        }

        /// <summary>
        /// The confirmation status of the anchor. Either pending or confirmed.
        /// </summary>
        /// <value>The confirmation status of the anchor. Either pending or confirmed.</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumAnchor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EthereumAnchor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EthereumAnchor" /> class.
        /// </summary>
        /// <param name="network">Indicates the blockchain network that contains this anchor. (required).</param>
        /// <param name="status">The confirmation status of the anchor. Either pending or confirmed. (required).</param>
        /// <param name="windowStartHeight">The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks..</param>
        /// <param name="windowMr">Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that&#39;s included in this anchor..</param>
        /// <param name="merkleBranch">The merkle branch that leads to the Directory block in question. Relates to the Window Merkle root. Presented as an array of Merkle nodes..</param>
        /// <param name="contractAddress">The address of the contract that initiated the anchor transaction..</param>
        /// <param name="txId">The ethereum transaction ID for the transaction that includes the anchor message..</param>
        /// <param name="txIndex">The index of the transaction within the block..</param>
        /// <param name="blockHash">The hash of the ethereum block that contains the anchor transaction..</param>
        public EthereumAnchor(NetworkEnum network = default(NetworkEnum), StatusEnum status = default(StatusEnum), int? windowStartHeight = default(int?), string windowMr = default(string), List<MerkleNode> merkleBranch = default(List<MerkleNode>), string contractAddress = default(string), string txId = default(string), int? txIndex = default(int?), string blockHash = default(string))
        {
            // to ensure "network" is required (not null)
            if (network == null)
            {
                throw new InvalidDataException("network is a required property for EthereumAnchor and cannot be null");
            }
            else
            {
                this.Network = network;
            }
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new InvalidDataException("status is a required property for EthereumAnchor and cannot be null");
            }
            else
            {
                this.Status = status;
            }
            this.WindowStartHeight = windowStartHeight;
            this.WindowMr = windowMr;
            this.MerkleBranch = merkleBranch;
            this.ContractAddress = contractAddress;
            this.TxId = txId;
            this.TxIndex = txIndex;
            this.BlockHash = blockHash;
        }
        


        /// <summary>
        /// The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks.
        /// </summary>
        /// <value>The height of the first ethereum block that contains an anchor for this directory block. Valid anchors for the Directory block in question may also be contained in subsequent ethereum blocks.</value>
        [DataMember(Name="window_start_height", EmitDefaultValue=false)]
        public int? WindowStartHeight { get; set; }

        /// <summary>
        /// Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that&#39;s included in this anchor.
        /// </summary>
        /// <value>Window Merkle Root. This is the Merkle root that was published in the ethereum transaction that anchors this directory block. The root represents every one of the 1000 Directory blocks that&#39;s included in this anchor.</value>
        [DataMember(Name="window_mr", EmitDefaultValue=false)]
        public string WindowMr { get; set; }

        /// <summary>
        /// The merkle branch that leads to the Directory block in question. Relates to the Window Merkle root. Presented as an array of Merkle nodes.
        /// </summary>
        /// <value>The merkle branch that leads to the Directory block in question. Relates to the Window Merkle root. Presented as an array of Merkle nodes.</value>
        [DataMember(Name="merkle_branch", EmitDefaultValue=false)]
        public List<MerkleNode> MerkleBranch { get; set; }

        /// <summary>
        /// The address of the contract that initiated the anchor transaction.
        /// </summary>
        /// <value>The address of the contract that initiated the anchor transaction.</value>
        [DataMember(Name="contract_address", EmitDefaultValue=false)]
        public string ContractAddress { get; set; }

        /// <summary>
        /// The ethereum transaction ID for the transaction that includes the anchor message.
        /// </summary>
        /// <value>The ethereum transaction ID for the transaction that includes the anchor message.</value>
        [DataMember(Name="tx_id", EmitDefaultValue=false)]
        public string TxId { get; set; }

        /// <summary>
        /// The index of the transaction within the block.
        /// </summary>
        /// <value>The index of the transaction within the block.</value>
        [DataMember(Name="tx_index", EmitDefaultValue=false)]
        public int? TxIndex { get; set; }

        /// <summary>
        /// The hash of the ethereum block that contains the anchor transaction.
        /// </summary>
        /// <value>The hash of the ethereum block that contains the anchor transaction.</value>
        [DataMember(Name="block_hash", EmitDefaultValue=false)]
        public string BlockHash { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EthereumAnchor {\n");
            sb.Append("  Network: ").Append(Network).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  WindowStartHeight: ").Append(WindowStartHeight).Append("\n");
            sb.Append("  WindowMr: ").Append(WindowMr).Append("\n");
            sb.Append("  MerkleBranch: ").Append(MerkleBranch).Append("\n");
            sb.Append("  ContractAddress: ").Append(ContractAddress).Append("\n");
            sb.Append("  TxId: ").Append(TxId).Append("\n");
            sb.Append("  TxIndex: ").Append(TxIndex).Append("\n");
            sb.Append("  BlockHash: ").Append(BlockHash).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EthereumAnchor);
        }

        /// <summary>
        /// Returns true if EthereumAnchor instances are equal
        /// </summary>
        /// <param name="input">Instance of EthereumAnchor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EthereumAnchor input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Network == input.Network ||
                    (this.Network != null &&
                    this.Network.Equals(input.Network))
                ) && 
                (
                    this.Status == input.Status ||
                    (this.Status != null &&
                    this.Status.Equals(input.Status))
                ) && 
                (
                    this.WindowStartHeight == input.WindowStartHeight ||
                    (this.WindowStartHeight != null &&
                    this.WindowStartHeight.Equals(input.WindowStartHeight))
                ) && 
                (
                    this.WindowMr == input.WindowMr ||
                    (this.WindowMr != null &&
                    this.WindowMr.Equals(input.WindowMr))
                ) && 
                (
                    this.MerkleBranch == input.MerkleBranch ||
                    this.MerkleBranch != null &&
                    this.MerkleBranch.SequenceEqual(input.MerkleBranch)
                ) && 
                (
                    this.ContractAddress == input.ContractAddress ||
                    (this.ContractAddress != null &&
                    this.ContractAddress.Equals(input.ContractAddress))
                ) && 
                (
                    this.TxId == input.TxId ||
                    (this.TxId != null &&
                    this.TxId.Equals(input.TxId))
                ) && 
                (
                    this.TxIndex == input.TxIndex ||
                    (this.TxIndex != null &&
                    this.TxIndex.Equals(input.TxIndex))
                ) && 
                (
                    this.BlockHash == input.BlockHash ||
                    (this.BlockHash != null &&
                    this.BlockHash.Equals(input.BlockHash))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Network != null)
                    hashCode = hashCode * 59 + this.Network.GetHashCode();
                if (this.Status != null)
                    hashCode = hashCode * 59 + this.Status.GetHashCode();
                if (this.WindowStartHeight != null)
                    hashCode = hashCode * 59 + this.WindowStartHeight.GetHashCode();
                if (this.WindowMr != null)
                    hashCode = hashCode * 59 + this.WindowMr.GetHashCode();
                if (this.MerkleBranch != null)
                    hashCode = hashCode * 59 + this.MerkleBranch.GetHashCode();
                if (this.ContractAddress != null)
                    hashCode = hashCode * 59 + this.ContractAddress.GetHashCode();
                if (this.TxId != null)
                    hashCode = hashCode * 59 + this.TxId.GetHashCode();
                if (this.TxIndex != null)
                    hashCode = hashCode * 59 + this.TxIndex.GetHashCode();
                if (this.BlockHash != null)
                    hashCode = hashCode * 59 + this.BlockHash.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
