/* 
 * Harmony Connect
 *
 * An easy to use API that helps you access the Factom blockchain.
 *
 * OpenAPI spec version: 1.0.19
 * Contact: harmony-support@factom.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using harmony-connect-client.Client;
using harmony-connect-client.Api;
using harmony-connect-client.Model;

namespace harmony-connect-client.Test
{
    /// <summary>
    ///  Class for testing IdentitiesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class IdentitiesApiTests
    {
        private IdentitiesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new IdentitiesApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of IdentitiesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' IdentitiesApi
            //Assert.IsInstanceOfType(typeof(IdentitiesApi), instance, "instance is a IdentitiesApi");
        }

        
        /// <summary>
        /// Test GetIdChainbyId
        /// </summary>
        [Test]
        public void GetIdChainbyIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identityChainId = null;
            //var response = instance.GetIdChainbyId(identityChainId);
            //Assert.IsInstanceOf<IdentityChain> (response, "response is IdentityChain");
        }
        
        /// <summary>
        /// Test GetKeybyEntryHash
        /// </summary>
        [Test]
        public void GetKeybyEntryHashTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identityChainId = null;
            //string keyString = null;
            //var response = instance.GetKeybyEntryHash(identityChainId, keyString);
            //Assert.IsInstanceOf<IdentityKey> (response, "response is IdentityKey");
        }
        
        /// <summary>
        /// Test GetKeysbyIdChainId
        /// </summary>
        [Test]
        public void GetKeysbyIdChainIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identityChainId = null;
            //int? limit = null;
            //int? offset = null;
            //var response = instance.GetKeysbyIdChainId(identityChainId, limit, offset);
            //Assert.IsInstanceOf<KeyList> (response, "response is KeyList");
        }
        
        /// <summary>
        /// Test PostIdChain
        /// </summary>
        [Test]
        public void PostIdChainTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //IdentityCreate identityCreate = null;
            //var response = instance.PostIdChain(identityCreate);
            //Assert.IsInstanceOf<ChainShort> (response, "response is ChainShort");
        }
        
        /// <summary>
        /// Test PostKeytoIdChainId
        /// </summary>
        [Test]
        public void PostKeytoIdChainIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string identityChainId = null;
            //IdentityKeyReplace identityKeyReplace = null;
            //var response = instance.PostKeytoIdChainId(identityChainId, identityKeyReplace);
            //Assert.IsInstanceOf<EntryShort> (response, "response is EntryShort");
        }
        
    }

}
